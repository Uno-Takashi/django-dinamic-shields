{"version":3,"sources":["Documentation.js","Source.js","HumanReadable.js","Issue.js","Filter.js","Issues.js","Traces.js","Runs.js","serviceWorker.js","index.js"],"names":["Documentation","Typography","Text","issues","kind","distance","name","feature","status","filter","codes","paths","callables","features","traceLengths","trace","fromSource","root","toSink","frameSelectionPrecondition","frameSelectionPostcondition","source","toNextFrame","tito","require","modes","py","pyx","java","kt","c","cpp","cs","m","scala","parseRanges","input","lines","undefined","split","map","numbers","i","parseInt","length","Error","line","begin","end","range","from","slice","ch","to","leadingWhitespace","search","trailingWhitespace","trimEnd","adjustRange","SourceQuery","gql","Source","props","useQuery","variables","path","loading","error","data","file","edges","node","content","title","toString","message","type","style","height","textAlign","paddingTop","LoadingOutlined","contents","location","titos","fileExtension","pop","mode","ranges","sort","left","right","layout","totalLines","folds","Math","max","index","foldSize","startLine","endLine","push","computeLayout","editor","value","options","lineNumbers","readOnly","editorDidMount","nativeEditor","markText","className","attributes","forEach","fold","foldCode","rangeFinder","_","widget","textHeight","defaultTextHeight","setSize","offset","heightAtLine","scrollTo","class","placement","size","icon","EditOutlined","onClick","window","editor_link","disabled","Boolean","SelectOutlined","scrollIntoView","HumanReadablePort","port","access","accesses","match","code","formal_match","makeDalvikClassHumanReadable","last","makeDalvikHumanReadable","clazz","method","return_type","parameters","makeDalvikParametersHumanReadable","startsWith","concat","join","HumanReadable","separator","threshold","readable","includes","wordBreak","Option","Select","Link","ShowMore","useState","showMore","setShowMore","items","maximumElementsToShow","truncatedItems","moreToShow","item","MinusCircleOutlined","PlusCircleOutlined","DelayedTooltip","mouseEnterDelay","children","Leaves","kinds","color","underline","marginTop","names","statusMap","StatusSelect","allStatuses","key","updateStatusMutation","useMutation","updateStatus","statusUpdateError","Modal","defaultValue","onChange","id","issue_id","minWidth","Issue","gutter","Label","span","Item","similar_issues","issue","similar_issue","FireOutlined","marginRight","hideTitle","extra","href","run_id","issue_instance_id","warning_message","is_new_issue","ExclamationCircleOutlined","first_seen","callable","width","filename","trigger","CodeTwoTone","sources","source_names","min_trace_length_to_sources","sinks","sink_names","min_trace_length_to_sinks","IssueSkeleton","active","paragraph","rows","Dragger","Upload","Panel","Collapse","Sider","Layout","SubMenu","Menu","emptyFilter","filterEqual","Object","keys","JSON","stringify","label","charAt","toUpperCase","Codes","codesQuery","codesData","allCodes","edge","currentFilter","setCurrentFilter","Paths","pathsQuery","pathsData","allPaths","MatchesIsField","inputValue","setInputValue","selectValue","setSelectValue","matchedValues","setMatchedValues","triggerChange","operation","values","parameterName","selectedOperation","placeholder","event","target","option_values","allOptions","option","suffix","SourceNames","sourceNamesQuery","sourceNamesData","allSourceNames","source_name","SourceKinds","sourceKindsQuery","sourceKindsData","allSourceKinds","source_kinds","source_kind","SinkNames","sinkNamesQuery","sinkNamesData","allSinkNames","sink_name","SinkKinds","sinkKindsQuery","sinkKindsData","allSinkKinds","sink_kinds","sink_kind","Statuses","statusQuery","statusData","allStatusOptions","statuses","replace","Callables","callablesQuery","callablesData","allCallables","Features","featuresQuery","featuresData","allFeatures","updateFeature","update","newFeatures","filterIndex","PlusOutlined","block","IsNewIssue","checked","TraceLength","traceLengthFromSources","traceLengthToSinks","min","marks","tipFormatter","FilterForm","ghost","header","setAppliedFilter","refetch","filterToVariables","setVisible","refetching","appliedFilter","SaveAndImportFilterModals","Form","useForm","form","setFieldsValue","saveFilterMutation","onCompleted","saveFilter","filterList","filterNamesList","importProps","multiple","onRemove","filterFile","splice","indexOf","beforeUpload","Promise","resolve","LIST_IGNORE","reader","FileReader","onload","e","parse","result","description","isValidFilter","readAsText","customRequest","onSuccess","onError","visible","saveModalVisible","onOk","getFieldsValue","json","hideSaveModal","savedFilter","okText","onCancel","zIndex","autoComplete","importModalVisible","hideImportModal","success","destroyOnClose","InboxOutlined","loadFilter","sessionStorage","getItem","clearFilter","removeItem","rangeValue","max_trace_length_to_sources","max_trace_length_to_sinks","filtersQuery","Filter","useEffect","setItem","initialFilter","clearButton","ClearOutlined","marginBottom","FilterOutlined","FilterControls","setSearch","setSaveModalVisible","deleteModalVisible","setDeleteModalVisible","setImportModalVisible","localStorage","recent_filters","getRecentFilters","recentFilters","setRecentFilters","filterFormVisible","setFilterFormVisible","filterLoading","filterError","filterData","filterRefetch","filters","decoded","toLowerCase","filterMap","deleteFilterMutation","deleteFilter","deleteError","onSelect","filterArray","updateRecentFilters","keyboard","defaultOpenKeys","borderRight","selectable","padding","onSearch","Search","SettingOutlined","SaveOutlined","DeleteOutlined","ExportOutlined","download","rel","ImportOutlined","FieldTimeOutlined","IssuesList","canFetchMore","onFetchMore","IssueQuery","Issues","params","oldData","setOldData","setRefetching","cursor","setCursor","fetchMore","moreData","setMoreData","setCanFetchMore","footer","after","pageInfo","endCursor","then","fetchMoreResult","margin","paddingRight","TraceRoot","VerticalAlignMiddleOutlined","SelectFrame","frames","selectedFrameIndex","setSelectedFrameIndex","callee_location","isPostcondition","isLeaf","is_leaf","select","suffixIcon","frame","leaf","ExpandAltOutlined","trace_length","LogoutOutlined","LoginOutlined","callee","callee_port","next","LoadFrame","NextTraceFramesQuery","frame_id","next_trace_frames","InitialTraceFramesQuery","Expansion","initial_trace_frames","VerticalAlignTopOutlined","leave","plain","VerticalAlignBottomOutlined","withRouter","Run","showRun","setShowRun","deleteRunMutation","deleteRun","SyncOutlined","run","actions","date","num_issues","triaged_issues","commit_hash","RunsQuery","hostname","Header","Content","Footer","client","ApolloClient","uri","cache","InMemoryCache","routing","ApolloProvider","FireFilled","exact","component","runs","Traces","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"inBAeaA,G,OAFEC,IAARC,KAEsB,CAC3BC,OAAQ,CACNC,KAAM,uBACNC,SAAU,2BACVC,KAAM,uBACNC,QAAS,0BACTC,OAAQ,gCAEVC,OAAQ,CACNC,MAAO,8BACPC,MAAO,4CACPC,UAAW,yDACXC,SACE,qEACFC,aAAc,0CAEhBC,MAAO,CACLC,WAAY,gEACZC,KAAM,8DACNC,OAAQ,6CACRC,2BACE,sDACFC,4BACE,mDAEJC,OAAQ,CACNC,YAAa,qBACbC,KAAM,2B,8VCxBVC,EAAQ,KACRA,EAAQ,KACRA,EAAQ,KACRA,EAAQ,K,IAEDtB,GAAQD,IAARC,KAYDuB,GAAQ,CACZC,GAAI,gBACJC,IAAK,gBACLC,KAAM,cACNC,GAAI,gBACJC,EAAG,cACHC,IAAK,gBACLC,GAAI,gBACJC,EAAG,oBACHC,MAAO,gBAuBT,SAASC,GACPC,EACAC,GAEA,YAAcC,IAAVF,GAAiC,OAAVA,GAA4B,KAAVA,EACpC,GAGFA,EAAMG,MAAM,KAAKC,KAAI,SAAAJ,GAC1B,IAAMK,EAAUL,EAAMG,MAAM,KAAKC,KAAI,SAAAE,GAAC,OAAIC,SAASD,MACnD,GAAuB,IAAnBD,EAAQG,OACV,MAAM,IAAIC,MAAJ,4BAA+BT,IAEvC,IAAMU,EAAOL,EAAQ,GAAK,EACtBM,EAAQN,EAAQ,GAChBO,EAAMP,EAAQ,GAClB,GAAIO,EAAMD,EAAO,OAEA,CAACC,EAAKD,GAApBA,EAFc,KAEPC,EAFO,KASjB,OAJID,IAAUC,GAAe,IAARA,GAAaF,GAAQ,GAAKA,EAAOT,EAAMO,SAC1DI,EAAMX,EAAMS,GAAMF,QA1CxB,SAAqBK,EAAcZ,GAKjC,IAAMhB,EAASgB,EAAMY,EAAMC,KAAKJ,MAAMK,MAAMF,EAAMC,KAAKE,GAAIH,EAAMI,GAAGD,IAC9DE,EAAoBjC,EAAOkC,OAAO,MAClCC,EAAqBnC,EAAOuB,OAASvB,EAAOoC,UAAUb,OAC5D,MAAO,CACLM,KAAM,CACJJ,KAAMG,EAAMC,KAAKJ,KACjBM,GAAIH,EAAMC,KAAKE,GAAKE,GAEtBD,GAAI,CACFP,KAAMG,EAAMI,GAAGP,KACfM,GAAIH,EAAMI,GAAGD,GAAKI,IA8BbE,CACL,CACER,KAAM,CAACJ,OAAMM,GAAIL,EAAQ,GACzBM,GAAI,CAACP,OAAMM,GAAIJ,IAEjBX,MAwDC,IAAMsB,GAAcC,YAAH,MA+ITC,OAlIf,SACEC,GACa,IAAD,IACRhB,EAAO,KADC,EAGmBiB,YAASJ,GAAa,CACnDK,UAAW,CAACC,KAAMH,EAAMG,QADnBC,EAHK,EAGLA,QAASC,EAHJ,EAGIA,MAAOC,EAHX,EAGWA,KAGjBC,EAAI,OAAGD,QAAH,IAAGA,GAAH,UAAGA,EAAMC,YAAT,iBAAG,EAAYC,MAAM,UAArB,aAAG,EAAsBC,KAE/BC,EAAU,8BACd,GAAIL,EACFK,EACE,kBAAC,IAAD,CAASC,MAAON,EAAMO,YACpB,kBAAC,IAAD,CAAOC,QAAO,4BAAuBb,EAAMG,MAAQW,KAAK,eAGvD,GAAIV,EACTM,EACE,yBAAKK,MAAO,CAACC,OAAQ,OAAQC,UAAW,SAAUC,WAAY,QAC5D,kBAAC,GAAD,CAAMJ,KAAK,aACT,kBAACK,GAAA,EAAD,MACA,6BAFF,WAGWnB,EAAMG,KAHjB,YAOC,CACL,IAAM5C,EAASgD,EAAKa,SACd7C,EAAQhB,EAAOkB,MAAM,MAG3B,GAAIF,EAAMO,OAASkB,EAAMqB,SAAS5C,MAAM,KAAK,GAC3CiC,EACE,kBAAC,IAAD,CAAOG,QAAO,UAAKb,EAAMG,KAAX,yRAAwSW,KAAK,aAExT,CACL,IAAM3B,EAAQd,GAAY2B,EAAMqB,SAAU9C,GAAO,GACjDS,EAAOG,EAAMC,KAAKJ,KAClB,IAAMsC,EAAQjD,GAAY2B,EAAMsB,MAAO/C,GACjCgD,EAAgBvB,EAAMG,KAAK1B,MAAM,KAAK+C,MACtCC,EAAO9D,GAAM4D,IAAkB5D,GAAK,GAEpC+D,EAAS,sBAAIJ,GAAJ,CAAWnC,IAAOwC,MAC/B,SAACC,EAAMC,GAAP,OAAiBD,EAAKxC,KAAKJ,KAAO6C,EAAMzC,KAAKJ,QAGzC8C,EAxGZ,SACEJ,EACAnD,GAEA,GAAsB,IAAlBmD,EAAO5C,OACT,MAAO,CAACiD,WAAY,GAAIC,MAAO,IAajC,IAVA,IAAID,EAAaE,KAAKC,IACpBR,EAAOA,EAAO5C,OAAS,GAAGM,KAAKJ,KAAO0C,EAAO,GAAGtC,KAAKJ,KAAO,EAC5D,IAGEgD,EAAQ,GAKHG,EAAQ,EAAGA,EAAQT,EAAO5C,OAAS,EAAGqD,IAAS,CACtD,IAAM5F,EAAWmF,EAAOS,EAAQ,GAAG/C,KAAKJ,KAAO0C,EAAOS,GAAO/C,KAAKJ,KAC5DoD,EAAW7F,EAAW,EAC5B,GAAIA,EANmB,GAMU,CAC/B,IAAM8F,EAAYX,EAAOS,GAAO/C,KAAKJ,KANzB,EAONsD,EAAUD,EAAYD,EAC5BJ,EAAMO,KAAK,CACTvD,KAAMqD,EACNlD,MAAO,CACLC,KAAM,CACJJ,KAAMqD,EACN/C,GAAIf,EAAM8D,GAAWvD,QAEvBS,GAAI,CACFP,KAAMsD,EACNhD,GAAIf,EAAM+D,GAASxD,WAIzBiD,EAAaA,EAAaK,EAvCX,GA2CnB,MAAO,CAACL,aAAYC,SA+DDQ,CAAcd,EAAQnD,GAIjCkE,EAAS,KAEb/B,EACE,kBAAC,cAAD,CACEgC,MAAOnF,EACPoF,QAAS,CAACC,aAAa,EAAMC,SAAU,OAAQpB,QAC/CqB,eAAgB,SAAAC,IACdN,EAASM,GAEFC,SAAS7D,EAAMC,KAAMD,EAAMI,GAAI,CACpC0D,UAAW,mBACXC,WAAY,CACVvC,MAAOzE,EAAcqB,OAAOC,eAIhC8D,EAAM6B,SAAQ,SAAAhE,GACZ4D,EAAaC,SAAS7D,EAAMC,KAAMD,EAAMI,GAAI,CAC1C0D,UAAW,cACXC,WAAY,CACVvC,MAAOzE,EAAcqB,OAAOE,WAKlCqE,EAAOE,MAAMmB,SAAQ,SAAAC,GACnBL,EAAaM,SAASD,EAAKpE,KAAM,CAC/BsE,YAAa,SAAAC,GAAC,OAAIH,EAAKjE,OACvBqE,OAAO,UAAD,OAAYJ,EAAKjE,MAAMI,GAAGP,KAC9BoE,EAAKpE,KADD,mCAIV,IAAMyE,EAAahB,EAAOiB,oBAC1BjB,EAAOkB,QAAQ,KAAM7B,EAAOC,WAAa0B,GACzC,IAAMG,EAASnB,EAAOoB,aACpBnC,EAAOA,EAAO5C,OAAS,GAAGM,KAAKJ,KAAO8C,EAAOC,WAAa,EAC1D,SAEFU,EAAOqB,SACL,EACAF,EAAS,EAAqB9B,EAAOE,MAAMlD,OAAS2E,OAQhE,OACE,oCACE,yBAAKM,MAAM,eACT,kBAAC,IAAD,CAASpD,MAAM,iBAAiBqD,UAAU,UACxC,kBAAC,IAAD,CACEC,KAAK,QACLC,KAAM,kBAACC,GAAA,EAAD,MACNrD,KAAK,OACLsD,QAAS,WACPC,OAAOhD,SAAWd,EAAK+D,aAEzBC,SAAUnE,GAAWC,IAAUmE,QAAQjE,EAAK+D,gBAGhD,kBAAC,IAAD,CAAS3D,MAAM,eAAeqD,UAAU,UACtC,kBAAC,IAAD,CACEC,KAAK,QACLC,KAAM,kBAACO,GAAA,EAAD,MACN3D,KAAK,OACLsD,QAAS,kBACP3B,GAAUA,EAAOiC,eAAe,CAAC1F,KAAMA,GAAQ,EAAGM,GAAI,KAExDiF,SAAUnE,GAAWC,MAI3B,yBAAK0D,MAAM,UAAUrD,KCvRpBtE,GAAQD,IAARC,KAEA,SAASuI,GAAkB3E,GAEhC,IAAI4E,EAAO5E,EAAM4E,KAEbC,EAAS,GACTC,EAAWF,EAAKG,MAAM,aACtBD,IACFF,EAAOA,EAAKvF,MAAM,EAAGuF,EAAK9F,OAASgG,EAAS,GAAGhG,QAC/CgG,EAAWA,EAAS,GACjBrG,MAAM,KACN9B,QAAO,SAAAkI,GAAM,MAAe,KAAXA,KACjBnG,KAAI,SAAAmG,GAAM,OAAIA,EAAOxF,MAAM,MAC3BX,KAAI,SAAAmG,GAAM,OAAI,kBAAC,GAAD,CAAMG,MAAI,GAAEH,MAC7BA,EAAS,kDAAcC,IAGZ,WAATF,IACFA,EAAO,WAET,IAAMK,EAAeL,EAAKG,MAAM,kBAShC,OARIE,IACFL,EACE,sDACiB,kBAAC,GAAD,CAAMI,MAAI,GAAEC,EAAa,MAM5C,kBAAC,GAAD,CAAMnE,KAAK,aACR8D,EACAC,GAsBA,SAASK,GAA6B5G,GAC3C,OAAQA,GACN,IAAK,IAAK,MAAO,MACjB,IAAK,IAAK,MAAO,OACjB,IAAK,IAAK,MAAO,UAGnB,IAAMG,EAAQH,EAAMG,MAAM,KACpB0G,EAAO1G,EAAMA,EAAMK,OAAS,GAClC,MAA+B,MAAxBqG,EAAKA,EAAKrG,OAAO,GAAaqG,EAAK9F,MAAM,GAAI,GAAK8F,EAG3D,SAASC,GAAwB9G,GAC/B,IAAMyG,EAAQzG,EAAMyG,MAAM,4BAC1B,GAAa,MAATA,EACF,OAAOzG,EAGT,IAAM+G,EAAQH,GAA6BH,EAAM,IAC3CO,EAASP,EAAM,GACfQ,EAAcL,GAA6BH,EAAM,IACjDS,EAtCR,SAASC,EAAkCnH,GACzC,GAAoB,GAAhBA,EAAMQ,OACR,MAAO,GAGT,GAAKR,EAAMoH,WAAW,KAIf,CACL,IAAMjH,EAAQH,EAAMG,MAAM,KAC1B,MAAO,CAACyG,GAA6BzG,EAAM,GAAK,MAAMkH,OACpDF,EAAkChH,EAAMY,MAAM,GAAGuG,KAAK,OANxD,MAAO,CAACV,GAA6B5G,EAAM,KAAKqH,OAC9CF,EAAkCnH,EAAMe,MAAM,KA+B/BoG,CAAkCV,EAAM,IAAIa,KAAK,MAEpE,MAAM,GAAN,OAAUL,EAAV,YAAyBF,EAAzB,YAAkCC,EAAlC,YAA4CE,EAA5C,KAGK,SAASK,GACd7F,GAOA,IAAM8F,EAAY9F,EAAM8F,WAAa,IAC/BC,EAAY/F,EAAM+F,WAAa,GAEjCC,EAAWhG,EAAM1B,MAOrB,GALI0H,EAASC,SAAS,OAEpBD,EAAWZ,GAAwBY,IAGjCA,EAASlH,OAASiH,EAAW,CAE/B,IAAMtH,EAAQuH,EAASvH,MAAMqH,GACzBrH,EAAMK,OAAS,IACjBkH,EAAQ,UAAMvH,EAAM,IAAZ,OAAiBqH,EAAjB,gBAAkCA,GAAlC,OACNrH,EAAMA,EAAMK,OAAS,GADf,YAEJL,EAAMA,EAAMK,OAAS,KAG7B,OACE,kBAAC,IAAD,CAAS6B,MAAOX,EAAM1B,OACpB,kBAAC,GAAD,CAAM0G,KAAMhF,EAAMgF,OAAQ,EAAOjE,MAAO,CAACmF,UAAW,cACjDF,I,4OCxFFG,GAAUC,IAAVD,OACA/J,GAAcD,IAAdC,KAAMiK,GAAQlK,IAARkK,KAEb,SAASC,GACPtG,GAIa,IAAD,EACoBuG,oBAAS,GAD7B,mBACLC,EADK,KACKC,EADL,KAENC,EAAQ1G,EAAM0G,MAEpB,GAAIA,EAAM5H,QAAUkB,EAAM2G,sBACxB,OACE,oCACGD,EAAMhI,KAAI,SAAAjC,GAAO,OAChB,kBAAC,IAAD,KAAMA,OAKZ,IAAMmK,EAAiBF,EAAMrH,MAC3B,EACAmH,EAAWE,EAAM5H,OAASkB,EAAM2G,uBAE5BE,EAAaH,EAAM5H,OAAS8H,EAAe9H,OACjD,OACE,oCACG8H,EAAelI,KAAI,SAAAoI,GAAI,OACtB,kBAAC,IAAD,KAAMA,MAER,kBAAC,IAAD,CACE1C,QAAS,kBAAMqC,GAAaD,IAC5BtC,KAAOsC,EAAoC,kBAACO,EAAA,EAAD,MAAzB,kBAACC,EAAA,EAAD,OAChBR,EAA0C,gBAA3C,eAAoBK,EAApB,cAOX,SAASI,GACPjH,GAMA,OACE,kBAAC,IAAD,CACEkH,gBAAiB,EACjBvG,MAAOX,EAAMU,QACbsD,UAAWhE,EAAMgE,WAChBhE,EAAMmH,UAOb,SAASC,GACPpH,GAOA,OACE,oCACE,kBAACiH,GAAD,CAAgBvG,QAASxE,EAAcG,OAAOC,MAC3C0D,EAAMqH,MAAM3I,KAAI,SAAApC,GAAI,OACnB,kBAAC,IAAD,CAAKgL,MAAsB,YAAftH,EAAM1D,KAAqB,QAAU,OAAQA,OAE3C,IALpB,KAMK,IACH,kBAAC2K,GAAD,CAAgBvG,QAASxE,EAAcG,OAAOE,UAC5C,kBAAC,GAAD,CAAMgL,WAAS,GAAf,oBAAkCvH,EAAMzD,SAAxC,MAEF,6BACA,kBAAC0K,GAAD,CAAgBjD,UAAU,QAAQtD,QAASxE,EAAcG,OAAOG,MAC9D,yBAAKuE,MAAO,CAACyG,UAAW,SACtB,kBAAClB,GAAD,CAAUI,MAAO1G,EAAMyH,MAAOd,sBAAuB,OA6BxD,IAAMe,GAAY,CACvB,cAAiB,gBACjB,aAAgB,eAChB,eAAkB,iBAClB,UAAa,YACb,YAAe,eAGXC,GAAe,SACnB3H,GAKA,IAAI4H,EAAc,GAClB,IAAI,IAAIC,KAAOH,GACbE,EAAYrF,KAAK,kBAAC4D,GAAD,CAAQzD,MAAOmF,GAAMH,GAAUG,KAGlD,IAAMC,EAAuBhI,YAAH,MANX,EAcoCiI,YACjDD,GAfa,mBAcRE,EAdQ,KAccC,EAdd,KAcO5H,MAetB,OAPG4H,GACDC,IAAM7H,MAAM,CACVM,MAAO,0BACPD,QAASuH,EAAkBrH,aAK7B,kBAAC,IAAD,CACEqD,KAAK,QACLkE,aAAcnI,EAAMtD,OACpB0L,SAfqB,SAAC1F,GACxBsF,EAAa,CAAC9H,UAAW,CAACmI,GAAIrI,EAAMsI,SAAU5L,OAAQgG,MAepD3B,MAAO,CAACwH,SAAU,UACjBX,IAKA,SAASY,GACdxI,GAMA,IAAMyI,EAAS,CAAC,EAAG,GAGbC,EAAQ,SAAC1I,GACb,OACE,kBAAC,IAAD,CAAK2I,KAAM,EAAG5H,MAAO,CAACE,UAAW,UAC/B,kBAAC,GAAD,CAAMH,KAAK,aAAad,EAAMmH,YAI9ByB,EAAO,SAAC5I,GACZ,OACE,kBAAC,IAAD,CAAK2I,KAAM,IACT,kBAAC,GAAD,CAAM7H,KAAK,aAAad,EAAMmH,YAIhC0B,EAAiB,KAErB,QAAmCrK,IAA/BwB,EAAM8I,MAAMD,eAA8B,CAC5C,IAAMxM,EAAS2D,EAAM8I,MAAMD,eAAenK,KACxC,SAAAqK,GAAa,sBAAaA,EAAa,SAA1B,aAA2CA,EAAa,MAAxD,QAEfF,EACE,kBAAC,IAAD,CAAKJ,OAAQA,GACX,kBAACC,EAAD,uBACA,kBAACE,EAAD,KACE,6BACE,kBAACtC,GAAD,CACEI,MAAOrK,EAAOyC,OAAQzC,EAAQ,CAAC,QAC/BsK,sBAAuB,OAQnC,OACE,kBAAC,IAAD,CACE1C,KAAK,QACLtD,MACE,oCACE,kBAACqI,EAAA,EAAD,CAAcjI,MAAO,CAACkI,YAAa,UAClCjJ,EAAMkJ,UAAY,QAAU,6CAASlJ,EAAM8I,MAAMR,WAGtDa,MACEnJ,EAAMkJ,UAAY,KAChB,kBAAC7C,GAAD,CACE+C,KAAI,eAAUpJ,EAAMqJ,OAAhB,kBAAgCrJ,EAAM8I,MAAMQ,oBADlD,WAMJ,kBAAC,IAAD,CAAKb,OAAQA,GACX,kBAACC,EAAD,aACA,kBAACE,EAAD,KACE,kBAAC,IAAD,CAASjI,MAAO,6DACd,kBAAC,GAAD,CAAMqE,MAAI,GAAEhF,EAAM8I,MAAM9D,KAAxB,MAAiChF,EAAM8I,MAAMS,oBAInD,kBAAC,IAAD,CAAKd,OAAQA,GACX,kBAACC,EAAD,oBACA,kBAACE,EAAD,KAAO5I,EAAM8I,MAAMjI,UAErB,kBAAC,IAAD,CAAK4H,OAAQA,GACX,kBAACC,EAAD,eACA,kBAACE,EAAD,KACE,kBAAC,IAAD,CAASjI,MAAOzE,EAAcG,OAAOK,QACjCsD,EAAM8I,MAAMU,aACZ,kBAAC,IAAD,CAAKtF,KAAM,kBAACuF,EAAA,EAAD,MAA+BnC,MAAM,WAAhD,cAGE,KACJ,kBAAC,GAAD,CACEgB,SAAUtI,EAAM8I,MAAMR,SACtB5L,OAAQsD,EAAM8I,MAAMpM,YAI5B,kBAAC,IAAD,CAAK+L,OAAQA,GACX,kBAACC,EAAD,mBACA,kBAACE,EAAD,KACE,kBAAC,GAAD,CAAM5D,MAAI,GAAEhF,EAAM8I,MAAMY,cAG5B,kBAAC,IAAD,CAAKjB,OAAQA,GACX,kBAACC,EAAD,iBACA,kBAACE,EAAD,KACE,kBAAC/C,GAAD,CAAevH,MAAO0B,EAAM8I,MAAMa,SAAU3E,MAAI,MAGpD,kBAAC,IAAD,CAAKyD,OAAQA,GACX,kBAACC,EAAD,iBACA,kBAACE,EAAD,KACE,kBAAC,IAAD,CAASjI,MAAM,oBACb,kBAAC,IAAD,CACEA,MAAM,iBACND,QACE,yBAAKK,MAAO,CAAC6I,MAAO,UAClB,kBAAC,GAAD,CACEzJ,KAAMH,EAAM8I,MAAMe,SAClBxI,SAAUrB,EAAM8I,MAAMzH,YAI5B2C,UAAU,cACV8F,QAAQ,SACR,kBAACC,EAAA,EAAD,QAEO,IACX,kBAAClE,GAAD,CAAevH,MAAO0B,EAAM8I,MAAMe,SAAU7E,MAAI,EAACc,UAAU,QAG/D,kBAAC,IAAD,CAAK2C,OAAQA,GACX,kBAACC,EAAD,gBACA,kBAACE,EAAD,KACE,kBAACxB,GAAD,CACE9K,KAAK,UACL+K,MAAOrH,EAAM8I,MAAMkB,QACnBvC,MAAOzH,EAAM8I,MAAMmB,aACnB1N,SAAUyD,EAAM8I,MAAMoB,gCAI5B,kBAAC,IAAD,CAAKzB,OAAQA,GACX,kBAACC,EAAD,cACA,kBAACE,EAAD,KACE,kBAACxB,GAAD,CACE9K,KAAK,QACL+K,MAAOrH,EAAM8I,MAAMqB,MACnB1C,MAAOzH,EAAM8I,MAAMsB,WACnB7N,SAAUyD,EAAM8I,MAAMuB,8BAI5B,kBAAC,IAAD,CAAK5B,OAAQA,GACX,kBAACC,EAAD,iBACA,kBAACE,EAAD,KACE,kBAAC3B,GAAD,CACEvG,QAASxE,EAAcG,OAAOI,QAC9BuH,UAAU,QACV,6BACE,kBAACsC,GAAD,CACEI,MAAO1G,EAAM8I,MAAM/L,SACnB4J,sBAAuB,QAMhCkC,GAKA,SAASyB,KACd,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUC,QAAM,EAACC,UAAW,CAACC,KAAM,O,ypFC3TlCC,GAAWC,IAAXD,QACAvE,GAAUC,IAAVD,OACAyE,GAASC,IAATD,MACAE,GAASC,IAATD,MACAE,GAAWC,IAAXD,QACA5O,GAAQD,IAARC,KAwBD8O,GAAc,CAClBnO,SAAU,CAAC,CAAC0E,KAAM,SAAU1E,SAAU,MAIlC0L,GAAS,CAAC,EAAG,GAEb0C,GAAc,SAClBvJ,EACAC,GAQA,OANAuJ,OAAOC,KAAKzJ,GAAMuB,SAAQ,SAAA0E,GAAG,YACbrJ,IAAdoD,EAAKiG,UAA4BjG,EAAKiG,GAAO,MAE/CuD,OAAOC,KAAKxJ,GAAOsB,SAAQ,SAAA0E,GAAG,YACbrJ,IAAfqD,EAAMgG,UAA4BhG,EAAMgG,GAAO,MAE1CyD,KAAKC,UAAU3J,KAAU0J,KAAKC,UAAU1J,IAG3C6G,GAAQ,SAAC1I,GACb,IAAMW,EAAQX,EAAMwL,MACjB/M,MAAM,aACNC,KAAI,SAAAgE,GAAK,OAAIA,EAAM+I,OAAO,GAAGC,cAAgBhJ,EAAMrD,MAAM,MACzDuG,KAAK,KACR,OACE,oCACE,kBAAC,IAAD,CAASjF,MAAOzE,EAAcS,OAAOqD,EAAMwL,QACzC,kBAAC,GAAD,CAAM1K,KAAK,aAAX,IAAyBH,MAM3BgL,GAAQ,SACZ3L,GAIgB,IAAD,EACT4L,EAAa9L,YAAH,MAWH+L,EAAa5L,YAAS2L,GAA5BtL,KACDwL,IAAqB,OAATD,QAAS,IAATA,GAAA,UAAAA,EAAWjP,aAAX,eAAkB4D,QAAS,IAAI9B,KAAI,SAAAqN,GAAI,OAAIA,EAAKtL,KAAKuE,QAEvE,OACE,oCACE,kBAAC,GAAD,CAAOwG,MAAM,UACb,kBAAC,IAAD,CAAK/C,OAAQA,IACX,kBAAC,IAAD,CAAKE,KAAM,IACT,kBAAC,IAAD,CACElH,KAAK,WACLiB,MAAO1C,EAAMgM,cAAcpP,MAC3B+F,QAASmJ,EAASpN,KAAI,SAAAgE,GAAK,MAAK,CAACA,YACjC3B,MAAO,CAAC6I,MAAO,QACfxB,SAAU,SAAAxL,GAAK,OACboD,EAAMiM,iBAAN,2BAA2BjM,EAAMgM,eAAjC,IAAgDpP,kBASxDsP,GAAQ,SACZlM,GAIgB,IAAD,EACTmM,EAAarM,YAAH,MAWHsM,EAAanM,YAASkM,GAA5B7L,KACD+L,IAAqB,OAATD,QAAS,IAATA,GAAA,UAAAA,EAAWvP,aAAX,eAAkB2D,QAAS,IAAI9B,KAAI,SAAAqN,GAAI,OAAIA,EAAKtL,KAAKN,QAEvE,OACE,oCACE,kBAAC,GAAD,CAAOqL,MAAM,UACb,kBAAC,IAAD,CAAK/C,OAAQA,IACX,kBAAC,IAAD,CAAKE,KAAM,IACT,kBAAC,IAAD,CACElH,KAAK,WACLiB,MAAO1C,EAAMgM,cAAcnP,MAC3B8F,QAAS0J,EAAS3N,KAAI,SAAAgE,GAAK,MAAK,CAACA,YACjC3B,MAAO,CAAC6I,MAAO,QACfxB,SAAU,SAAAvL,GAAK,OACbmD,EAAMiM,iBAAN,2BAA2BjM,EAAMgM,eAAjC,IAAgDnP,kBASxDyP,GAAiB,SACrBtM,GAMgB,IAAD,IACqBuG,mBAAS,IAD9B,mBACRgG,EADQ,KACIC,EADJ,OAEuBjG,mBAAS,IAFhC,mBAERkG,EAFQ,KAEKC,EAFL,OAG2BnG,mBAAS,IAHpC,mBAGRoG,EAHQ,KAGOC,EAHP,KAKTC,EAAgB,SAACC,GAAuD,IAApCpK,EAAmC,4DAApBlE,EACnDuO,EAAS,QACAvO,IAAVkE,IACDA,EAAuB,OAAdoK,EAAsBL,EAAcF,GAE/CQ,EAAO/M,EAAMgN,eAAiB,CAC5BF,UAAWA,EACXpK,MAAOA,GAET1C,EAAMiM,iBAAN,2BAA2BjM,EAAMgM,eAAkBe,KAG/CE,GACJ,UAAAjN,EAAMgM,cAAchM,EAAMgN,sBAA1B,eAA0CF,YAAa,KAEzD,OACE,kBAAC,IAAD,CAAKrE,OAAQA,IACX,kBAAC,IAAD,CAAKE,KAAM,GACT,kBAAC,IAAD,CACEhG,QAAS,CAAC,CAACD,MAAO,MAAO,CAACA,MAAO,YACjCA,MAAOuK,EACP7E,SAAUyE,EACV9L,MAAO,CAAC6I,MAAO,WAGnB,kBAAC,IAAD,CAAKjB,KAAM,IACc,YAAtBsE,EACC,kBAAC,IAAD,CACEC,YAAY,qBACZnM,MAAO,CAAC6I,MAAO,QACflH,MAAO6J,EACPnE,SAAU,SAAA+E,GACR,IAAMzK,EAAQyK,EAAMC,OAAO1K,MAC3B8J,EAAc9J,GACd,IAAM2K,EAAgBrN,EAAMsN,WAAW3Q,QAAO,SAAA4Q,GAAM,OAChDA,EAAOxI,MAAMrC,MAEjBkK,EAAiBS,GACjBR,EAAc,UAAWnK,IAE3B8K,OACE,kBAAC,IAAD,CACE7M,OAAQgM,GAAiB,IAAI/G,KAAK,MAClC5B,UAAU,UACV,kBAAC,GAAD,CAAMlD,KAAK,YAAYmD,KAAK,UACxB0I,GAAiB,IAAI7N,WAM/B,kBAAC,IAAD,CACE2C,KAAK,WACLiB,MAAO+J,EACP9J,QAAS3C,EAAMsN,WAAW5O,KAAI,SAAAgE,GAAK,MAAK,CAACA,YACzC3B,MAAO,CAAC6I,MAAO,QACfxB,SAAU,SAAA1F,GACRgK,EAAehK,GACfmK,EAAc,KAAMnK,SAS5B+K,GAAc,SAClBzN,GAIgB,IAAD,EACT0N,EAAmB5N,YAAH,MAWT6N,EAAmB1N,YAASyN,GAAlCpN,KACDsN,IAAiC,OAAfD,QAAe,IAAfA,GAAA,UAAAA,EAAiB1D,oBAAjB,eAA+BzJ,QAAS,IAAI9B,KAAI,SAAAqN,GAAI,OAAIA,EAAKtL,KAAKoN,eAE1F,OACE,oCACE,kBAAC,GAAD,CAAOrC,MAAM,SACb,kBAAC,GAAD,CACE8B,WAAYM,EACZ5B,cAAehM,EAAMgM,cACrBC,iBAAkBjM,EAAMiM,iBACxBe,cAAc,mBAMhBc,GAAc,SAClB9N,GAIgB,IAAD,EACT+N,EAAmBjO,YAAH,MAWTkO,EAAmB/N,YAAS8N,GAAlCzN,KACD2N,IAAiC,OAAfD,QAAe,IAAfA,GAAA,UAAAA,EAAiBE,oBAAjB,eAA+B1N,QAAS,IAAI9B,KAAI,SAAAqN,GAAI,OAAIA,EAAKtL,KAAK0N,eAE1F,OACE,oCACE,kBAAC,GAAD,CAAO3C,MAAM,SACb,kBAAC,GAAD,CACE8B,WAAYW,EACZjC,cAAehM,EAAMgM,cACrBC,iBAAkBjM,EAAMiM,iBACxBe,cAAc,mBAMhBoB,GAAY,SAChBpO,GAIgB,IAAD,EACTqO,EAAiBvO,YAAH,MAWPwO,EAAiBrO,YAASoO,GAAhC/N,KACDiO,IAA6B,OAAbD,QAAa,IAAbA,GAAA,UAAAA,EAAelE,kBAAf,eAA2B5J,QAAS,IAAI9B,KAAI,SAAAqN,GAAI,OAAIA,EAAKtL,KAAK+N,aAEpF,OACE,oCACE,kBAAC,GAAD,CAAOhD,MAAM,SACb,kBAAC,GAAD,CACE8B,WAAYiB,EACZvC,cAAehM,EAAMgM,cACrBC,iBAAkBjM,EAAMiM,iBACxBe,cAAc,kBAMhByB,GAAY,SAChBzO,GAIgB,IAAD,EACT0O,EAAiB5O,YAAH,MAWP6O,EAAiB1O,YAASyO,GAAhCpO,KACDsO,IAA6B,OAAbD,QAAa,IAAbA,GAAA,UAAAA,EAAeE,kBAAf,eAA2BrO,QAAS,IAAI9B,KAAI,SAAAqN,GAAI,OAAIA,EAAKtL,KAAKqO,aAEpF,OACE,oCACE,kBAAC,GAAD,CAAOtD,MAAM,SACb,kBAAC,GAAD,CACE8B,WAAYsB,EACZ5C,cAAehM,EAAMgM,cACrBC,iBAAkBjM,EAAMiM,iBACxBe,cAAc,iBAMhB+B,GAAW,SACf/O,GAIgB,IAAD,EACTgP,EAAclP,YAAH,MAWJmP,EAAchP,YAAS+O,GAA7B1O,KACD4O,IACM,OAAVD,QAAU,IAAVA,GAAA,UAAAA,EAAYE,gBAAZ,eAAsB3O,QAAS,IAC/B9B,KAAI,SAAAqN,GAAI,OACRA,EAAKtL,KAAK/D,OAAO0S,QAAQ,eAAgB,OACzC1Q,KAAI,SAAAhC,GAAM,OACV,kBAAC,GAAD,CAAQgG,MAAOhG,GAASgL,GAAUhL,OAGpC,OACE,oCACE,kBAAC,GAAD,CAAO8O,MAAM,WACb,kBAAC,IAAD,CAAK/C,OAAQA,IACX,kBAAC,IAAD,CAAKE,KAAM,IACT,kBAAC,IAAD,CACElH,KAAK,WACLiB,MAAO1C,EAAMgM,cAAcmD,SAC3BpO,MAAO,CAAC6I,MAAO,QACfxB,SAAU,SAAA+G,GAAQ,OAChBnP,EAAMiM,iBAAN,2BAA2BjM,EAAMgM,eAAjC,IAAgDmD,gBAEjDD,OAQPG,GAAY,SAChBrP,GAIgB,IAAD,EACTsP,EAAiBxP,YAAH,MAWPyP,EAAiBtP,YAASqP,GAAhChP,KACDkP,IAA6B,OAAbD,QAAa,IAAbA,GAAA,UAAAA,EAAezS,iBAAf,eAA0B0D,QAAS,IAAI9B,KAC3D,SAAAqN,GAAI,OAAIA,EAAKtL,KAAKkJ,YAGpB,OACE,oCACE,kBAAC,GAAD,CAAO6B,MAAM,cACb,kBAAC,GAAD,CACE8B,WAAYkC,EACZxD,cAAehM,EAAMgM,cACrBC,iBAAkBjM,EAAMiM,iBACxBe,cAAc,gBAMhByC,GAAW,SACfzP,GAIgB,IAAD,EACT0P,EAAgB5P,YAAH,MAWN6P,EAAgB1P,YAASyP,GAA/BpP,KACDsP,IAA2B,OAAZD,QAAY,IAAZA,GAAA,UAAAA,EAAc5S,gBAAd,eAAwByD,QAAS,IAAI9B,KACxD,SAAAqN,GAAI,OAAIA,EAAKtL,KAAKhE,WAGdM,EAAWiD,EAAMgM,cAAcjP,UAAY,GAEjD,OACE,oCACE,kBAAC,GAAD,CAAOyO,MAAM,aACZzO,EAAS2B,KAAI,SAACjC,EAAS0F,GACtB,IAAM0N,EAAgB,SAAAC,GACpB,IAAIC,EAAW,YAAOhT,GACtBgT,EAAY5N,GAAZ,2BAAyB1F,GAAYqT,GACrC9P,EAAMiM,iBAAN,2BACKjM,EAAMgM,eADX,IAEEjP,SAAUgT,MAId,OACE,kBAAC,IAAD,CAAKtH,OAAQA,IACX,kBAAC,IAAD,CAAKE,KAAM,GACT,kBAAC,IAAD,CACEhG,QAAS,CACP,CAACD,MAAO,UACR,CAACA,MAAO,UACR,CAACA,MAAO,YAEVA,MAAOjG,EAAQgF,KACfV,MAAO,CAAC6I,MAAO,QACfxB,SAAU,SAAA3G,GAAI,OAAIoO,EAAc,CAACpO,aAGrC,kBAAC,IAAD,CAAKkH,KAAM,IACT,kBAAC,IAAD,CACElH,KAAK,WACLkB,QAASiN,EAAYlR,KAAI,SAAAgE,GAAK,MAAK,CAACA,YACpCA,MAAOjG,EAAQM,SACfqL,SAAU,SAAArL,GAAQ,OAAI8S,EAAc,CAAC9S,cACrCgE,MAAO,CAAC6I,MAAO,WAGnB,kBAAC,IAAD,CAAKjB,KAAM,GACT,kBAAC,IAAD,CACE7H,KAAK,OACLsD,QAAS,WACPpE,EAAMiM,iBAAN,2BACKjM,EAAMgM,eADX,IAEEjP,SAAUA,EAASJ,QACjB,SAAC4G,EAAGyM,GAAJ,OAAoB7N,IAAU6N,SAIpCzL,SAAUxH,EAAS+B,OAAS,EAC5BoF,KAAM,kBAAC6C,EAAA,EAAD,aAMhB,kBAAC,IAAD,CAAK0B,OAAQA,IACX,kBAAC,IAAD,CAAKE,KAAM,IACT,kBAAC,IAAD,CACE7H,KAAK,SACLsD,QAAS,WACPpE,EAAMiM,iBAAN,2BACKjM,EAAMgM,eADX,IAEEjP,SAAS,GAAD,mBAAMA,GAAN,CAAgB,CAAC0E,KAAM,SAAU1E,SAAU,UAGvDmH,KAAM,kBAAC+L,EAAA,EAAD,MACNlP,MAAO,CAAC6I,MAAO,OAAQpC,UAAW,GAClC0I,OAAK,GACJ,IAXH,qBAoBJC,GAAa,SACjBnQ,GAKA,OACE,oCACE,kBAAC,GAAD,CAAOwL,MAAM,WACb,6BACE,kBAAC,IAAD,CACE4E,QAASpQ,EAAMgM,cAAcxC,aAC7BpB,SAAU,SAAA+E,GAAK,OACbnN,EAAMiM,iBAAN,2BACKjM,EAAMgM,eADX,IAEExC,eAAc2D,EAAMC,OAAOgD,cAAiB5R,QAG/C,IATL,iCAkBA6R,GAAc,SAClBrQ,GAMA,IAAM0C,EACW,YAAf1C,EAAM1D,KACF0D,EAAMgM,cAAcsE,uBACpBtQ,EAAMgM,cAAcuE,mBAC1B,OACE,kBAAC,IAAD,CAAK9H,OAAQA,IACX,kBAAC,IAAD,CAAKE,KAAM,EAAG5H,MAAO,CAACG,WAAY,KAChC,kBAAC,GAAD,CAAMJ,KAAK,aACO,YAAfd,EAAM1D,KAAqB,eAAiB,aAGjD,kBAAC,IAAD,CAAKqM,KAAM,IACT,kBAAC,IAAD,CACExJ,OAAK,EACLqR,IAAK,EACLtO,IAviBkB,GAwiBlBiG,aAAc,CAAC,EAxiBG,IAyiBlBsI,MAAO,CACL,EAAK,IACL,GAAM,aAERC,aAAc,SAAAhO,GAAK,OA7iBD,KA8iBhBA,EAAgC,YAAcA,GAEhDA,MAAOA,EACP0F,SAAU,SAAA1F,GACW,YAAf1C,EAAM1D,KACR0D,EAAMiM,iBAAN,2BACKjM,EAAMgM,eADX,IAEEsE,uBAAwB5N,KAG1B1C,EAAMiM,iBAAN,2BACKjM,EAAMgM,eADX,IAEEuE,mBAAoB7N,WAU9BiO,GAAa,SAAC3Q,GAelB,OACE,oCACE,kBAAC,GAAD,CACEgM,cAAehM,EAAMgM,cACrBC,iBAAkBjM,EAAMiM,mBAE1B,kBAAC,GAAD,CACED,cAAehM,EAAMgM,cACrBC,iBAAkBjM,EAAMiM,mBAE1B,kBAAC,IAAD,CAAU2E,OAAK,GACb,kBAAChG,GAAD,CAAOiG,OAAO,UACZ,kBAAC,GAAD,CACE7E,cAAehM,EAAMgM,cACrBC,iBAAkBjM,EAAMiM,mBAE1B,kBAAC,GAAD,CACED,cAAehM,EAAMgM,cACrBC,iBAAkBjM,EAAMiM,oBAG5B,kBAACrB,GAAD,CAAOiG,OAAO,QACZ,kBAAC,GAAD,CACE7E,cAAehM,EAAMgM,cACrBC,iBAAkBjM,EAAMiM,mBAE1B,kBAAC,GAAD,CACED,cAAehM,EAAMgM,cACrBC,iBAAkBjM,EAAMiM,qBAI9B,kBAAC,GAAD,CACED,cAAehM,EAAMgM,cACrBC,iBAAkBjM,EAAMiM,mBAE1B,kBAAC,GAAD,CACED,cAAehM,EAAMgM,cACrBC,iBAAkBjM,EAAMiM,mBAE1B,kBAAC,GAAD,CACED,cAAehM,EAAMgM,cACrBC,iBAAkBjM,EAAMiM,mBAE1B,kBAAC,IAAD,MACA,kBAAC,GAAD,CACED,cAAehM,EAAMgM,cACrBC,iBAAkBjM,EAAMiM,mBAE1B,kBAAC,IAAD,MACA,kBAAC,GAAD,CAAOT,MAAM,iBACb,kBAAC,GAAD,CACElP,KAAK,UACL0P,cAAehM,EAAMgM,cACrBC,iBAAkBjM,EAAMiM,mBAE1B,kBAAC,GAAD,CACE3P,KAAK,QACL0P,cAAehM,EAAMgM,cACrBC,iBAAkBjM,EAAMiM,mBAE1B,kBAAC,IAAD,MACA,yBAAKlL,MAAO,CAACE,UAAW,UACtB,kBAAC,IAAD,CACEmD,QAAS,WACPpE,EAAMiM,iBAAiBf,KAEzB3G,SAAU4G,GAAYnL,EAAMgM,cAAed,KAJ7C,SAMU,IACV,kBAAC,IAAD,CACEpK,KAAK,UACLsD,QA9EM,WACZpE,EAAM8Q,iBAAiB9Q,EAAMgM,eAC7BhM,EAAM+Q,QAAQC,GAAkBhR,EAAMgM,gBACtChM,EAAMiR,YAAW,IA4EX7Q,QAASJ,EAAMkR,WACf3M,SAAU4G,GAAYnL,EAAMgM,cAAehM,EAAMmR,gBAJnD,YAYFC,GAA4B,SAChCpR,GASgB,IAAD,EACAqR,IAAKC,UAAbC,EADQ,yBAGiB/S,IAA7BwB,EAAMgM,cAAcxP,MACrB+U,EAAKC,eAAe,CAClBhV,KAAMwD,EAAMgM,cAAcxP,OAI9B,IAIMiV,EAAqB3R,YAAH,MAbT,EA0BeiI,YAAY0J,EAAoB,CAACC,YAjB3C,SAACpR,GACnBN,EAAM+Q,aAVO,mBA0BRY,EA1BQ,KA0BKtR,EA1BL,KA0BKA,MAEpB,GAAIA,EACF,OAAO,kBAAC,IAAD,CAAOS,KAAK,SAAST,EAAMO,YAGpC,IAAIgR,EAAa,GACbC,EAAkB,GAQhBC,EAAc,CAClBC,UAAU,EACVC,SAAU,SAAAC,GACRL,EAAWM,OAAON,EAAWO,QAAQF,GAAa,IAEpDG,aALkB,SAKLH,GACX,OAAO,IAAII,SAAQ,SAAAC,GACjB,GAAwB,qBAApBL,EAAWnR,KACbD,IAAQR,MAAR,UAAiB4R,EAAWzV,KAA5B,wBACA8V,EAAQ3H,IAAO4H,iBACV,CACL,IAAIC,EAAqB,IAAIC,WAC7BD,EAAOE,OAAS,SAACC,GACf,IAAIhW,EAA4B2O,KAAKsH,MAAMD,EAAEvF,OAAOyF,SAnBxC,SAAClW,GACrB,aAAyB6B,IAAhB7B,EAAOH,WACSgC,IAAvB7B,EAAOmW,aACP1H,OAAOC,KAAK1O,GAAQmC,OAAS,GAiBlBiU,CAAcpW,GACjBkE,IAAQR,MAAR,UAAiB4R,EAAWzV,KAA5B,gCAEAoV,EAAWrP,KAAK5F,GAChBkV,EAAgBtP,KAAhB,UAAwB5F,EAAOH,KAA/B,WAEF8V,KAEFE,EAAOQ,WAAWf,QAIxBgB,cAAe,YAAiC,IAA/BC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,QAAS5S,EAAU,EAAVA,KAC/BsR,EAAgB5L,SAAS1F,EAAK/D,MAChC0W,EAAU,MAEVC,EAAQ,WAyCd,OACE,oCACE,kBAAC,IAAD,CACExS,MAAM,kBACNyS,QAASpT,EAAMqT,iBACfC,KArBS,WACb,IAAMvG,EAASwE,EAAKgC,iBACpB5B,EAAW,CACTzR,UAAW,CACT1D,KAAMuQ,EAAOvQ,KACbsW,YAAa/F,EAAO+F,YACpBU,KAAMlI,KAAKC,UAAUvL,EAAMgM,kBAG/BhM,EAAMyT,gBACN,IAAIC,EAAc1T,EAAMgM,cACxB0H,EAAW,KAAW3G,EAAOvQ,KAC7BkX,EAAW,YAAkB3G,EAAO+F,YACpC9S,EAAMiM,iBAAiByH,IASnBC,OAAO,OACPC,SAAU5T,EAAMyT,cAChBI,OAAQ,KACR,kBAAC,IAAD,CAAM/R,OAAO,WAAWyP,KAAMA,EAAMuC,aAAa,OAC/C,kBAAC,IAAKlL,KAAN,CAAW4C,MAAM,OAAOhP,KAAK,QAC3B,kBAAC,IAAD,OAEF,kBAAC,IAAKoM,KAAN,CAAW4C,MAAM,cAAchP,KAAK,eAClC,kBAAC,IAAD,SAIN,kBAAC,IAAD,CACE4W,QAASpT,EAAM+T,mBACfJ,OAAO,iBACPL,KAzDW,WACf1B,EAAWzO,SAAQ,SAAAxG,GACjB,IAAIH,EAAOG,EAAOH,KACdsW,EAAcnW,EAAOmW,mBAClBnW,EAAM,YACNA,EAAM,YACbgV,EAAW,CACTzR,UAAW,CACT1D,KAAMA,EACNsW,YAAaA,EACbU,KAAMlI,KAAKC,UAAU5O,SAI3BqD,EAAMgU,kBACNnT,IAAQoT,QAAR,mBAA4BrC,EAAW9S,OAAvC,aACA8S,EAAa,GACbC,EAAkB,IAyCd+B,SAAU5T,EAAMgU,gBAChBH,OAAQ,IACRK,gBAAgB,GAChB,kBAACxJ,GAAD,iBAAaoH,EAAb,CAA0B/Q,MAAO,CAACyG,UAAW,UAC3C,uBAAGvE,UAAU,wBACX,kBAACkR,EAAA,EAAD,OAEF,uBAAGlR,UAAU,mBAAb,gDASH,SAASmR,KACd,IAAMzX,EAAS0H,OAAOgQ,eAAeC,QAAQ,UAC7C,YAAe9V,IAAX7B,EACK2O,KAAKsH,MAAMjW,GAEb,KAGF,SAAS4X,KAIP,IAHPxD,EAGM,wDAFN9E,EAEM,wDADND,EACM,uDAD6Bd,GAE/B6F,GAGF9E,EAAiBf,IAIjB6F,EAAQC,GAAkB9F,KAC1B6F,EAAQC,GAAkBhF,KAP1B3H,OAAOgQ,eAAeG,WAAW,UAW9B,SAASxD,GAAkBrU,GAChC,IAAM8X,EAAa,SAAA/R,GACjB,GAAc,IAAVA,GAh2BoB,KAm2BpBA,EAGJ,OAAOA,GAGT,OAAO,2BACF/F,GADL,IAEEuN,4BAA6BuK,GAC1B9X,EAAO2T,wBAA0B,IAAI,IAExCoE,4BAA6BD,GAC1B9X,EAAO2T,wBAA0B,IAAI,IAExCjG,0BAA2BoK,GAAY9X,EAAO4T,oBAAsB,IAAI,IACxEoE,0BAA2BF,GAAY9X,EAAO4T,oBAAsB,IAAI,MAYrE,IAAMqE,GAAe9U,YAAH,MAkOnB+U,GAAS,SAAC7U,GAQd8U,qBAAU,WACRzQ,OAAOgQ,eAAeU,QAAQ,SAAUzJ,KAAKC,UAAUvL,EAAMgM,kBAC5D,CAAChM,EAAMgM,gBACV,IAAMgJ,EAAgBZ,MAAgBlJ,GAEhCxK,EACJ,yBAAKK,MAAO,CAAC6I,MAAO,UAClB,kBAAC,GAAD,CACEmH,QAAS/Q,EAAM+Q,QACfG,WAAYlR,EAAMkR,WAClBD,WAAYjR,EAAMiR,WAClBjF,cAAehM,EAAMgM,cACrBC,iBAAkBjM,EAAMiM,iBACxBkF,cAAenR,EAAMmR,cACrBL,iBAAkB9Q,EAAM8Q,oBAKxBmE,EACJ,kBAAC,IAAD,CACElU,MAAO,CAAC6I,MAAO,OAAQpC,UAAW,QAClCtD,KAAM,kBAACgR,EAAA,EAAD,MACN9Q,QAAS,kBACPmQ,GAAYvU,EAAM+Q,QAAS/Q,EAAMiM,iBAAkBjM,EAAMgM,iBAJ7D,gBAUF,OACE,oCACE,yBAAKjL,MAAO,CAACoU,aAAc,SACzB,kBAAC,IAAD,CACE/B,QAASpT,EAAMoT,QACf1S,QAASA,EACTsD,UAAU,UACVI,QAAS,kBAAMpE,EAAMiR,YAAYjR,EAAMoT,WACvC,kBAAC,IAAD,CACErS,MAAO,CAAC6I,MAAO,QACf1F,KAAM,kBAACkR,EAAA,EAAD,MACNtU,KAAOqK,GAAY6J,EAAe9J,IAA2B,KAAZ,WAHnD,cAOCC,GAAY6J,EAAe9J,IAA6B,KAAd+J,KAMtCI,GA/Qe,SAACrV,GAGxB,IAAD,EACwBuG,mBAAS,MADjC,mBACG9G,EADH,KACW6V,EADX,KAEEN,EAAgBZ,MAAgBlJ,GAFlC,EAG4C3E,oBAAS,GAHrD,mBAGG8M,EAHH,KAGqBkC,EAHrB,OAIgDhP,oBAAS,GAJzD,mBAIGiP,EAJH,KAIuBC,EAJvB,OAKgDlP,oBAAS,GALzD,mBAKGwN,EALH,KAKuB2B,EALvB,OAMsCnP,mBA/B5C,WACE,IAAIjG,EAAOgL,KAAKsH,MAAM+C,aAAarB,QAAQ,mBAC3C,OAAGhU,EACMA,EAAKsV,eAEP,GA0B4CC,IAN/C,mBAMGC,EANH,KAMkBC,EANlB,OAO8CxP,oBAAS,GAPvD,mBAOGyP,EAPH,KAOsBC,EAPtB,OAQsC1P,mBACxCyO,GATE,mBAQGhJ,EARH,KAQkBC,EARlB,OAWsC1F,mBACxCyO,GAZE,mBAWG7D,EAXH,KAWkBL,EAXlB,KAeJgE,qBAAU,WACRa,aAAaZ,QACX,iBACAzJ,KAAKC,UAAU,CAAC,eAAkBuK,QAlBlC,MA2BA7V,YAAS2U,IAJFsB,EAvBP,EAuBF9V,QACO+V,GAxBL,EAwBF9V,MACM+V,GAzBJ,EAyBF9V,KACS+V,GA1BP,EA0BFtF,QAGIuF,GAAUJ,EACZ,GACAE,GAAWE,QAAQ9V,MAAM9B,KAAI,SAAAqN,GAC3B,IAAMwK,EAAUjL,KAAKsH,MAAM7G,EAAKtL,KAAK+S,MACrC,OAAO,2BACFzH,EAAKtL,MACL8V,MAIL5T,GAAU2T,GACb3Z,QAAO,SAAAA,GAAW,IAAD,IAChB,OAAe,OAAX8C,IAIF9C,EAAOH,KAAKga,cAAcvQ,SAASxG,EAAO+W,iBAA1C,UACA7Z,EAAOmW,mBADP,iBACA,EAAoB0D,qBADpB,aACA,EAAmCvQ,SAASxG,EAAO+W,oBAGtD9X,KAAI,SAAA/B,GACH,MAAO,CACL+F,MAAO/F,EAAOH,KACdgP,MACE,6BACG7O,EAAOH,KACR,6BACA,kBAAC,GAAD,CAAMsE,KAAK,aAAanE,EAAOmW,kBAMrC2D,GAAY,GAChBH,GAAQnT,SAAQ,SAAAxG,GAAM,OAAK8Z,GAAU9Z,EAAOH,MAAQG,KAEpD,IAAM+Z,GAAuB5W,YAAH,MAjEtB,GAwEyCiI,YAC3C2O,GACA,CACEhF,YAAa2E,KA3Eb,qBAwEGM,GAxEH,MAwEyBC,GAxEzB,MAwEkBvW,MAOtB,GAAIuW,GACF,OAAO,kBAAC,IAAD,CAAO9V,KAAK,SAAS8V,GAAYhW,YAE1C,GAAIuV,GACF,OAAO,kBAAC,IAAD,CAAOrV,KAAK,SAASqV,GAAYvV,YAG1C,IAuBMiW,GAAW,SAACnU,GAChB4S,EAAU,MAfgB,SAAC3Y,GAC3B,GAAGmZ,EAAchX,OAAS,EAAG,CAC3B,IAAIgY,EAAchB,EAElB,IAAc,IADFgB,EAAY3E,QAAQxV,GACf,CACf,IAAIuC,EAAM4X,EAAYhY,QAAU,EAAI,EAAIgY,EAAYhY,OACpDgY,EAAcA,EAAYzX,MAAM,EAAGH,GACnC6W,EAAiB,CAACpZ,GAAQgJ,OAAOmR,UAGnCf,EAAiB,CAACpZ,IAMpBoa,CAAoBrU,GACpBuJ,EAAiBwK,GAAU/T,IAC3BoO,EAAiB2F,GAAU/T,IAC3B1C,EAAM+Q,QAAQC,GAAkByF,GAAU/T,KAC1CuT,GAAqB,IAGvB,OACE,kBAACnL,GAAD,CAAOlB,MAAO,KACZ,kBAAC,GAAD,CACEmH,QAAS/Q,EAAM+Q,QACfG,WAAYlR,EAAMkR,WAClBlF,cAAeA,EACfC,iBAAkBA,EAClBkF,cAAeA,EACfL,iBAAkBA,EAClBsC,QAAS4C,EACT/E,WAAYgF,IAEd,kBAAC,IAAD,CACE7C,QAASoC,EACT7B,OAAO,SACPL,KA/CW,WACfqD,GAAa,CAACzW,UAAW,CAAC1D,KAAMwP,EAAcxP,QAC9CiZ,GAAsB,GACtBxJ,EAAiBf,IACjB6K,EAAiBD,EAAcnZ,QAAO,SAAAmK,GAAI,OACxCA,IAASkF,EAAcxP,UA2CrBoX,SAAU,kBAAM6B,GAAsB,IACtC5B,OAAQ,KALV,+BAM+B,IAC7B,kBAAC,GAAD,CAAMmD,UAAQ,GAAEhL,EAAcxP,OAEhC,kBAAC,GAAD,CACEwP,cAAeA,EACfC,iBAAkBA,EAClBoH,iBAAkBA,EAClBI,cAAe,kBAAM8B,GAAoB,IACzCxB,mBAAoBA,EACpBC,gBAAiB,kBAAM0B,GAAsB,IAC7C3E,QAASsF,KACX,kBAAC,IAAD,CACE5U,KAAK,SACLwV,gBAAiB,CAAC,WAClBlW,MAAO,CAAEmW,YAAa,GACtBC,YAAY,GACZ,oCACE,kBAAC,IAAD,CACEpW,MAAO,CAAC6I,MAAO,OAAQwN,QAAS,oBAChCzU,QAASA,GACTkU,SAAUA,GACVQ,SAAU/B,EACV5S,MAAOjD,IAAM,OAAIuM,QAAJ,IAAIA,OAAJ,EAAIA,EAAexP,OAAQ,MACxC,kBAAC,IAAM8a,OAAP,CAAcpK,YAAY,mBAG9B,kBAAClC,GAAD,CAAS9G,KAAM,kBAACqT,EAAA,EAAD,MAAqB5W,MAAM,kBACxC,kBAAC,IAAKiI,KAAN,CACErE,SAAU4G,GAAYD,GAAac,GACnC5H,QAAS,kBAAMmR,GAAoB,IACnCrR,KAAM,kBAACsT,EAAA,EAAD,OAHR,QAMA,kBAAC,IAAK5O,KAAN,CACErE,cAAkC/F,KAAX,OAAbwN,QAAa,IAAbA,OAAA,EAAAA,EAAexP,MACzB4H,QAAS,kBAAMqR,GAAsB,IACrCvR,KAAM,kBAACuT,EAAA,EAAD,OAHR,UAMA,kBAAC,IAAK7O,KAAN,CACErE,cAAkC/F,KAAX,OAAbwN,QAAa,IAAbA,OAAA,EAAAA,EAAexP,MACzB0H,KAAM,kBAACwT,EAAA,EAAD,YACoBlZ,KAAX,OAAbwN,QAAa,IAAbA,OAAA,EAAAA,EAAexP,MAAsB,SACrC,uBACE4M,KAAI,yBAAoB4C,EAAcxP,MACtCmb,SAAQ,UAAK3L,EAAcxP,KAAnB,SACR4Q,OAAO,SACPwK,IAAI,uBAJN,WASJ,kBAAC,IAAKhP,KAAN,CACExE,QAAS,kBAAMsR,GAAsB,IACrCxR,KAAM,kBAAC2T,EAAA,EAAD,OAFR,WAMF,kBAAC7M,GAAD,CACEnD,IAAI,UACJtD,WAAYuR,EAAchX,OAAS,GACnCoF,KAAM,kBAAC4T,EAAA,EAAD,MAAuBnX,MAAM,kBACjCmV,EAAcpX,KAAI,SAAAlC,GAAI,OACtB,kBAAC,IAAKoM,KAAN,CAAWxE,QAAS,kBAAMyS,GAASra,KAChCA,U,ssDC5pCf,SAASub,GAAW/X,GAMlB,OACE,oCACGA,EAAM3D,OAAOqC,KAAI,gBAAG+B,EAAH,EAAGA,KAAH,OAChB,oCACE,kBAAC+H,GAAD,CAAOa,OAAQrJ,EAAMqJ,OAAQP,MAAOrI,IACpC,iCAGJ,yBAAKM,MAAO,CAAEE,UAAW,WACvB,kBAAC,IAAD,CACEH,KAAK,SACLyD,UAAWvE,EAAMgY,aACjB5T,QAASpE,EAAMiY,aAHjB,kBAWR,IAEaC,GAAapY,YAAH,KAFL,IAmJHqY,GA9EA,SAACnY,GACd,IAAMqJ,EAASrJ,EAAM+E,MAAMqT,OAAO/O,OAE5BqK,EAAcU,KACdlU,EAAYwT,EAAc1C,GAAkB0C,GAAe,KAJF,EAMjCnN,mBAAS,MANwB,mBAMxD8R,EANwD,KAM/CC,EAN+C,OAO3B/R,oBAAS,GAPkB,mBAOxD2K,EAPwD,KAO5CqH,EAP4C,OASnChS,mBAAS,MAT0B,mBASxDiS,EATwD,KAShDC,EATgD,OAUVxY,YAASiY,GAAY,CACxEhY,UAAU,2BAAMA,GAAP,IAAkBmJ,SAAQzF,OAAQ,MADrCxD,EAVuD,EAUvDA,QAASC,EAV8C,EAU9CA,MAAOC,EAVuC,EAUvCA,KAAMoY,EAViC,EAUjCA,UAAW3H,EAVsB,EAUtBA,QAVsB,EAa/BxK,mBAAS,IAbsB,mBAaxDoS,EAbwD,KAa9CC,EAb8C,OAcvBrS,oBAAS,GAdc,mBAcxDyR,EAdwD,KAc1Ca,EAd0C,KAsB/D/D,qBAAU,WACJxU,IAAS+X,GACXE,GAAc,KAEf,CAACjY,EAAM+X,EAASC,IAEnB,IAAI5X,EAAU,KACd,GAAIL,EACFK,EACE,kBAAC,IAAD,CAAOC,MAAM,QAAQyS,SAAS,EAAM0F,OAAQ,MAC1C,2BAAIzY,EAAMO,kBAGT,GAAIR,EACTM,EAAU,kBAAC4J,GAAD,UACL,CACL,IAAMjO,EAASiE,EAAKjE,OAAOmE,OAAS,GACpCE,EACE,kBAACqX,GAAD,CACE1O,OAAQA,EACRhN,OAAM,sBAAMA,GAAN,YAAiBsc,IACvBV,YAAa,WACXS,EAAU,CACRxY,UAAW,CACT6Y,MAAOP,GAAUlY,EAAKjE,OAAO2c,SAASC,aAEvCC,MAAK,SAAAC,GACN,IAAM9c,EAAS8c,EAAgB7Y,KAAKjE,OACpCoc,EAAUpc,EAAO2c,SAASC,WAC1BL,EAAY,GAAD,mBAAKD,GAAL,YAAkBtc,EAAOmE,SACpCqY,EAzHM,IAyHUxc,EAAOmE,MAAM1B,YAGjCkZ,aAAc3b,EAAOyC,QA5HX,IA4HkCkZ,IAKlD,OACE,oCACE,kBAAC,IAAD,CAAYjX,MAAO,CAAEqY,OAAQ,WAC3B,kBAAC,IAAWxQ,KAAZ,CAAiBQ,KAAK,SAAtB,QACA,kBAAC,IAAWR,KAAZ,YAAsBS,IAExB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQtI,MAAO,CAAEsY,aAAc,SAC5B3Y,GAEH,kBAAC,GAAD,CACEqQ,QAtDgB,SAAAhE,GACtBuL,EAAWhY,GACXiY,GAAc,GACdxH,EAAQhE,IAoDFmE,WAAYA,O,0xDCjJtBxT,EAAQ,K,IAEDtB,GAAQD,IAARC,KACA+J,GAAUC,IAAVD,OAEP,SAASmT,GACPtZ,GAEA,GAAIA,EAAMI,QACR,OACE,oCACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUmK,QAAM,KAElB,8BAKN,IAAMzB,EAAQ9I,EAAMM,KAAKjE,OAAOmE,MAAM,GAAGC,KAEzC,OACE,oCACE,kBAAC,IAAD,KACE,kBAAC,GAAD,KACE,kBAAC8Y,GAAA,EAAD,CAA6BxY,MAAO,CAACkI,YAAa,UADpD,iCAEiC,IAC/B,kBAACpD,GAAD,CAAevH,MAAOwK,EAAMa,SAAU3E,MAAI,IAH5C,OAGoD,IAClD,kBAACa,GAAD,CAAevH,MAAOwK,EAAMe,SAAU7E,MAAI,IAJ5C,KAMA,kBAAC,GAAD,CAAQ7E,KAAM2I,EAAMe,SAAUxI,SAAUyH,EAAMzH,YAEhD,8BAmBN,SAASmY,GACPxZ,GAKa,IAAD,EACwCuG,mBAC1B,IAAxBvG,EAAMyZ,OAAO3a,OAAe,KAAO,GAFzB,mBACL4a,EADK,KACeC,EADf,KAKZ,GAA4B,IAAxB3Z,EAAMyZ,OAAO3a,OACf,OACE,yBAAKiC,MAAO,CAAC6I,MAAO,OAAQ3I,UAAW,SAAUmW,QAAS,QACxD,kBAAC,GAAD,CAAMtW,KAAK,WAAX,wBAKN,IAAMvD,EACJ,kBAAC,GAAD,CACE4C,KAAMH,EAAMyZ,OAAO,GAAG5P,SACtBxI,SAAUrB,EAAMyZ,OAAO,GAAGG,gBAC1BtY,MAAOtB,EAAMyZ,OAAO,GAAGnY,QAIrBuY,EAAiC,kBAAf7Z,EAAM1D,KACxBwd,EACmB,OAAvBJ,GAA+B1Z,EAAMyZ,OAAOC,GAAoBK,QAE9DC,EAAS,KACb,IAAKF,EAAQ,CAkBXE,EACE,yBAAKjW,MAAM,gBACT,kBAAC,IAAD,CACEoE,aAAcuR,EACd3Y,MAAO,CAAC6I,MAAO,QACfxB,SAAUuR,EACVM,WAAY,KACZ1V,SAAUvE,EAAMyZ,OAAO3a,OAAS,GAC/BkB,EAAMyZ,OAAO/a,KAAI,SAACwb,EAAO/X,GACxB,OACE,kBAAC,GAAD,CAAQO,MAAOP,GA3BZ,SAAC+X,GACZ,IAAMC,EAAON,EAAkB,SAAW,OAEtC3V,EAAO,kBAACkW,GAAA,EAAD,MAKX,OAJ2B,IAAvBF,EAAMG,eACRnW,EAAO2V,EAAkB,kBAACS,GAAA,EAAD,MAAqB,kBAACC,GAAA,EAAD,OAI9C,kBAAC,IAAD,CAAS5Z,MAAK,sBAAiBwZ,IAC7B,kBAAC,GAAD,CAAMrZ,KAAK,aACRoD,EADH,IACUgW,EAAMG,aAAc,MAiBvBnW,CAAKgW,GACN,kBAACrU,GAAD,CAAevH,MAAO4b,EAAMM,OAAQxV,MAAI,EAACe,UAAW,KAAO,IAC3D,kBAACpB,GAAD,CAAmBC,KAAMsV,EAAMO,aAAe,WAS5D,IAAIC,EAAO,KAWX,OAV2B,OAAvBhB,GAAgCI,IAClCY,EACE,kBAACC,GAAD,CACErR,kBAAmBtJ,EAAMsJ,kBACzB4Q,MAAOla,EAAMyZ,OAAOC,GACpBpd,KAAM0D,EAAM1D,QAMhB,oCACGud,EACC,oCACGa,EACAV,GAED,KACHzc,EACCsc,EAKE,KAJF,oCACGG,EACAU,IAOX,SAASC,GACP3a,GAKa,IAAD,EACN4a,EAAuB9a,YAAH,MADd,EA4BmBG,YAAS2a,EAAsB,CAC5D1a,UAAW,CACToJ,kBAAmBtJ,EAAMsJ,kBACzBuR,SAAU7a,EAAMka,MAAMW,SACtBve,KAAM0D,EAAM1D,QAJT8D,EA5BK,EA4BLA,QAASC,EA5BJ,EA4BIA,MAAOC,EA5BX,EA4BWA,KAOjBmZ,IAAc,OAAJnZ,QAAI,IAAJA,GAAA,UAAAA,EAAMwa,yBAAN,eAAyBta,QAAS,IAAI9B,KAAI,SAAAqN,GAAI,OAAIA,EAAKtL,QAEvE,OAAIL,EACK,kBAAC,IAAD,CAAUmK,QAAM,IAGrBlK,EACK,kBAAC,IAAD,CAAOS,KAAK,SAAST,EAAMO,YAIlC,kBAAC4Y,GAAD,CACElQ,kBAAmBtJ,EAAMsJ,kBACzBmQ,OAAQA,EACRnd,KAAM0D,EAAM1D,OAKX,IAAMye,GAA0Bjb,YAAH,MAmBpC,SAASkb,GACPhb,GAKa,IAAD,IACmBC,YAAS8a,GAAyB,CAC/D7a,UAAW,CAACoJ,kBAAmBtJ,EAAMsJ,kBAAmBhN,KAAM0D,EAAM1D,QAD/D8D,EADK,EACLA,QAASC,EADJ,EACIA,MAAOC,EADX,EACWA,KAGjBmZ,IAAc,OAAJnZ,QAAI,IAAJA,GAAA,UAAAA,EAAM2a,4BAAN,eAA4Bza,QAAS,IAAI9B,KACvD,SAAAqN,GAAI,OAAIA,EAAKtL,QAGToZ,EAAiC,kBAAf7Z,EAAM1D,KAE1BoE,EAAU,KAEZA,EADEN,EACQ,kBAAC,IAAD,CAAUmK,QAAM,IACjBlK,EACC,kBAAC,IAAD,CAAOS,KAAK,SAAST,EAAMO,YAGnC,kBAAC4Y,GAAD,CACElQ,kBAAmBtJ,EAAMsJ,kBACzBmQ,OAAQA,EACRnd,KAAM0D,EAAM1D,OAKlB,IAAIwW,EAAc,KACZhK,EAAQ9I,EAAM8I,MAsCpB,OArCa,MAATA,IAEAgK,EADE+G,EAEA,oCACE,kBAAC,GAAD,KACE,kBAACqB,GAAA,EAAD,CAA0Bna,MAAO,CAACkI,YAAa,UADjD,WAEoC,IAAzBH,EAAMkB,QAAQlL,OAAe,QAAU,SAC/CgK,EAAMkB,QAAQtL,KAAI,SAAAyc,GAAK,OACtB,kBAAC,IAAD,CAAK7T,MAAM,SAAS6T,MAJxB,WAMU,oCANV,IAMuB,kBAACtV,GAAD,CAAevH,MAAOwK,EAAMa,SAAU3E,MAAI,IAC9D,IAPH,MAOU,kBAACa,GAAD,CAAevH,MAAOwK,EAAMe,SAAU7E,MAAI,IAPpD,KASA,kBAAC,IAAD,CAASoW,OAAK,GAAd,WAKF,oCACE,kBAAC,GAAD,KACE,kBAACC,GAAA,EAAD,CAA6Bta,MAAO,CAACkI,YAAa,UADpD,WAEoC,IAAzBH,EAAMkB,QAAQlL,OAAe,QAAU,SAC/CgK,EAAMkB,QAAQtL,KAAI,SAAAyc,GAAK,OACtB,kBAAC,IAAD,CAAK7T,MAAM,SAAS6T,MAJxB,WAMU,mCANV,IAMsB,kBAACtV,GAAD,CAAevH,MAAOwK,EAAMa,SAAU3E,MAAI,IAAI,IANpE,iBAOwC,IAAvB8D,EAAMqB,MAAMrL,OAAe,QAAU,SACnDgK,EAAMqB,MAAMzL,KAAI,SAAAyc,GAAK,OACpB,kBAAC,IAAD,CAAK7T,MAAM,OAAO6T,MATtB,MAWK,kBAACtV,GAAD,CAAevH,MAAOwK,EAAMe,SAAU7E,MAAI,IAX/C,KAaA,kBAAC,IAAD,CAASoW,OAAK,GAAd,YAMN,oCACE,kBAAC,IAAD,KACGtI,EACApS,GAEH,8BAKC,IAAMwX,GAAapY,YAAH,MAmFRwb,qBApDR,SAAetb,GAA+C,IAAD,IAC5DqJ,EAASrJ,EAAM+E,MAAMqT,OAAO/O,OAC5BC,EAAoBtJ,EAAM+E,MAAMqT,OAAO9O,kBAFqB,EAInCrJ,YAASiY,GAAY,CAClDhY,UAAW,CAACmJ,SAAQC,uBADflJ,EAJ2D,EAI3DA,QAASC,EAJkD,EAIlDA,MAAOC,EAJ2C,EAI3CA,KAGjBwI,GAAY,OAAJxI,QAAI,IAAJA,GAAA,UAAAA,EAAMjE,cAAN,mBAAcmE,MAAM,UAApB,eAAwBC,OAAQ,KAE1CC,EAAU,KA+Bd,OA7BEA,EADEL,EAEA,kBAAC,IAAD,CAAOM,MAAM,QAAQyS,SAAS,EAAM0F,OAAQ,MAC1C,2BAAIzY,EAAMO,aAKZ,oCACGR,EACC,kBAACkK,GAAD,MAEA,kBAAC9B,GAAD,CAAOa,OAAQA,EAAQP,MAAOA,EAAOI,WAAW,IAElD,6BACA,kBAAC8R,GAAD,CACE1R,kBAAmBA,EACnBR,MAAOA,EACPxM,KAAK,kBAEP,kBAACgd,GAAD,CAAWhZ,KAAMA,EAAMF,QAASA,IAChC,kBAAC4a,GAAD,CACE1R,kBAAmBA,EACnBR,MAAOA,EACPxM,KAAK,kBAOX,oCACE,kBAAC,IAAD,CAAYyE,MAAO,CAACqY,OAAQ,WAC1B,kBAAC,IAAWxQ,KAAZ,CAAiBQ,KAAK,SAAtB,QACA,kBAAC,IAAWR,KAAZ,CAAiBQ,KAAI,eAAUC,IAA/B,OAA8CA,GAC9C,kBAAC,IAAWT,KAAZ,eAA6B,OAALE,QAAK,IAALA,OAAA,EAAAA,EAAOR,WAAY,KAE5C5H,M,ydC7ZAtE,GAAcD,IAAdC,KAAMiK,GAAQlK,IAARkK,KAOb,SAASkV,GAAIvb,GACX,IAAMyI,EAAS,CAAC,EAAG,GAD6C,EAElClC,oBAAS,GAFyB,mBAEzDiV,EAFyD,KAEhDC,EAFgD,KAI1D/S,EAAQ,SAAC1I,GACb,OACE,kBAAC,IAAD,CAAK2I,KAAM,EAAG5H,MAAO,CAACE,UAAW,UAC/B,kBAAC,GAAD,CAAMH,KAAK,aAAad,EAAMmH,YAI9ByB,EAAO,SAAC5I,GACZ,OACE,kBAAC,IAAD,CAAK2I,KAAM,IACT,kBAAC,GAAD,CAAM7H,KAAK,aAAad,EAAMmH,YAK9BuU,EAAoB5b,YAAH,MAnByC,EA2BtBiI,YACxC2T,EACA,CACEhK,YADF,WAEI+J,GAAW,MA/B+C,mBA2BzDE,EA3ByD,KA2BtC/E,EA3BsC,KA2B7CvW,MAahBuW,GACD1O,IAAM7H,MAAM,CAACM,MAAO,wBAAyBD,QAASkW,EAAYhW,aAGpE,IAAMQ,EACJ,kBAAC,IAAD,CAAKuH,KAAM,GACT,kBAAC,IAAD,CACE1E,KAAK,QACLtD,MACE,oCACE,kBAACib,GAAA,EAAD,CAAc7a,MAAO,CAACkI,YAAa,UADrC,OAEOjJ,EAAM6b,IAAIxS,QAGnBF,MACE,kBAAC,GAAD,CACE/E,QAAS,kBAAMmQ,MACfnL,KAAI,eAAUpJ,EAAM6b,IAAIxS,SAF1B,UAMFyS,QAAS,CACP,kBAACrE,EAAA,EAAD,CAAgBrT,QA1BP,WACfuX,EAAU,CAACzb,UAAW,CAACmI,GAAIrI,EAAM6b,IAAIxS,eA2BjC,kBAAC,IAAD,CAAKZ,OAAQA,GACX,kBAACC,EAAD,aACA,kBAACE,EAAD,KACE,kBAAC,GAAD,CAAM5D,MAAI,GAAEhF,EAAM6b,IAAIE,QAG1B,kBAAC,IAAD,CAAKtT,OAAQA,GACX,kBAACC,EAAD,qBACA,kBAACE,EAAD,KACE,kBAAC,GAAD,CAAM5D,MAAI,GAAEhF,EAAM6b,IAAIG,YAAc,KAGxC,kBAAC,IAAD,CAAKvT,OAAQA,GACX,kBAACC,EAAD,uBACA,kBAACE,EAAD,KACE,kBAAC,GAAD,CAAM5D,MAAI,GAAEhF,EAAM6b,IAAII,gBAAkB,KAG5C,kBAAC,IAAD,CAAKxT,OAAQA,GACX,kBAACC,EAAD,oBACA,kBAACE,EAAD,KACE,kBAAC,GAAD,CAAM5D,MAAI,GAAEhF,EAAM6b,IAAIK,aAAe,WAK3C,8BAIJ,OACE,oCACIV,EAAUpa,EAAW,MAKtB,IAAM+a,GAAYrc,YAAH,MCvGF0E,QACW,cAA7BH,OAAOhD,SAAS+a,UAEe,UAA7B/X,OAAOhD,SAAS+a,UAEhB/X,OAAOhD,SAAS+a,SAASrX,MACvB,2D,4RCDCsX,GAA2BtR,IAA3BsR,OAAQC,GAAmBvR,IAAnBuR,QAASC,GAAUxR,IAAVwR,OACjBngB,GAAQD,IAARC,KAMP,IAAMogB,GAAS,IAAIC,KAAa,CAC9BC,IALQ,WAMRC,MAAO,IAAIC,OAwDb,IAAMC,GACJ,kBAACC,GAAA,EAAD,CAAgBN,OAAQA,IACtB,kBAAC,KAAD,KACE,kBAAC,IAAD,KACE,kBAACH,GAAD,CAAQtY,MAAM,UACZ,yBAAKA,MAAM,QACT,kBAACgZ,GAAA,EAAD,CAAYhc,MAAO,CAACkI,YAAa,UADnC,SAKF,kBAACqT,GAAD,KACE,yBAAKvY,MAAM,QACT,kBAAC,KAAD,CAAOiZ,OAAK,EAAC7c,KAAK,IAAI8c,UAjElC,WACE,IAAMd,EAAYrc,YAAH,MADyB,EAcfG,YAASkc,EAAW,CAC3CzK,YAAa,SAAApR,GACX,IAAI+I,GAAU,EACd/I,EAAK4c,KAAK1c,MAAM2C,SAAQ,SAAA4I,GAClBA,EAAKtL,KAAK4I,OAASA,IACrBA,EAAS0C,EAAKtL,KAAK4I,YAGP,IAAZA,GACFnB,IAAM7H,MAAM,CACVM,MAAO,0BACPD,QAAS,2BAGb2D,OAAOhD,SAAP,eAA0BgI,MAdvBjJ,EAdiC,EAcjCA,QAASC,EAdwB,EAcxBA,MAsBhB,OAJIA,GACF6H,IAAM7H,MAAM,CAACM,MAAO,0BAA2BD,QAASL,EAAMO,aAG5DR,EAEA,kBAAC,IAAD,KACE,yBAAKW,MAAO,CAACC,OAAQ,OAAQC,UAAW,SAAUC,WAAY,QAC5D,kBAAC,GAAD,CAAMJ,KAAK,aACT,kBAACK,GAAA,EAAD,MACA,6BAFF,2BAUD,QAgBG,kBAAC,KAAD,CAAO6b,OAAK,EAAC7c,KAAK,SAAS8c,UFoCxB,SAAcjd,GAAmC,IAAD,EAC9BC,YAASkc,IAAjC/b,EADsD,EACtDA,QAASC,EAD6C,EAC7CA,MAAOC,EADsC,EACtCA,KAEvB,GAAID,EAEF,OADA6H,IAAM7H,MAAM,CAACM,MAAO,0BAA2BD,QAASL,EAAMO,aACvD,KAGT,IAAIF,EAAU,KAqBd,OApBIN,IACFM,EACE,kBAAC,IAAD,CAAKiI,KAAM,GACT,kBAAC,IAAD,KACE,yBAAK5H,MAAO,CAACC,OAAQ,OAAQC,UAAW,SAAUC,WAAY,QAC5D,kBAAC,GAAD,CAAMJ,KAAK,aACT,kBAACK,GAAA,EAAD,MACA,6BAFF,uBAWNb,IACFI,EAAUJ,EAAK4c,KAAK1c,MAAM9B,KAAI,SAAAqN,GAAI,OAAI,kBAACwP,GAAD,CAAKM,IAAK9P,EAAKtL,WAIrD,oCACE,kBAAC,IAAD,CAAYM,MAAO,CAACqY,OAAQ,WAC1B,kBAAC,IAAWxQ,KAAZ,cAEF,kBAAC,IAAD,CAAKH,OAAQ,IACV/H,OEtEG,kBAAC,KAAD,CAAOsc,OAAK,EAAC7c,KAAK,gBAAgB8c,UAAW9E,KAC7C,kBAAC,KAAD,CACE6E,OAAK,EACL7c,KAAK,wCACL8c,UAAWE,OAIjB,kBAACZ,GAAD,SAMRa,IAASC,OAAOR,GAASS,SAASC,eAAe,SDqB3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxE,MAAK,SAAAyE,GACJA,EAAaC,gBAEdC,OAAM,SAAAxd,GACLyd,QAAQzd,MAAMA,EAAMQ,c","file":"static/js/main.9892bc95.chunk.js","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport React from 'react';\nimport {Tooltip, Typography} from 'antd';\n\nconst {Text} = Typography;\n\nexport const Documentation = {\n  issues: {\n    kind: 'Explanation for kind',\n    distance: 'Explanation for distance',\n    name: 'Explanation for name',\n    feature: 'Explanation for feature',\n    status: 'Explanation for issue status',\n  },\n  filter: {\n    codes: 'Only show issues with codes',\n    paths: 'Only show issues in files at a given path',\n    callables: 'Only show issues that originate in a specific callable',\n    features:\n      'Only show issues with traces whose features match these conditions',\n    traceLengths: 'Only show issues with traces of lenght',\n  },\n  trace: {\n    fromSource: 'Trace from the issue root to the source where data originates',\n    root: 'Where the trace from the source meets the trace to the sink',\n    toSink: 'Trace from the issue root to the data sink',\n    frameSelectionPrecondition:\n      'Explore alternative traces leading to the same sink',\n    frameSelectionPostcondition:\n      'Explore alternative traces from the same source',\n  },\n  source: {\n    toNextFrame: 'Flow to next frame',\n    tito: 'Flow through function',\n  },\n};\n\nexport function DocumentationTooltip(\n  props: $ReadOnly<{path: string}>,\n): React$Node {\n  var title = Documentation;\n  for (const element of props.path.split('.')) {\n    title = title[element];\n  }\n  return (\n    <div style={{display: 'inline', marginLeft: 4}}>\n      <Tooltip title={title}>\n        <Text type=\"secondary\">[?]</Text>\n      </Tooltip>\n    </div>\n  );\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport React from 'react';\nimport {Alert, Button, Tooltip, Typography} from 'antd';\nimport {EditOutlined, SelectOutlined, LoadingOutlined} from '@ant-design/icons';\nimport {useQuery, gql} from '@apollo/client';\nimport {Controlled as CodeMirror} from 'react-codemirror2';\nimport {Documentation} from './Documentation';\n\nimport './Source.css';\nrequire('codemirror/lib/codemirror.css');\nrequire('codemirror/addon/fold/foldcode.js');\nrequire('codemirror/mode/python/python.js');\nrequire('codemirror/mode/clike/clike.js');\n\nconst {Text} = Typography;\n\ntype Location = $ReadOnly<{\n  line: number,\n  ch: number,\n}>;\n\ntype Range = $ReadOnly<{\n  from: Location,\n  to: Location,\n}>;\n\nconst modes = {\n  py: \"text/x-python\",\n  pyx: \"text/x-cython\",\n  java: \"text/x-java\",\n  kt: \"text/x-kotlin\",\n  c: \"text/x-csrc\",\n  cpp: \"text/x-c++src\",\n  cs: \"text/x-csharp\",\n  m: \"text/x-objectivec\",\n  scala: \"text/x-scala\",\n}\n\nfunction adjustRange(range: Range, lines: $ReadOnlyArray<string>): Range {\n  // TODO(T78595608): workaround for inaccurate Pysa locations with leading and\n  // trailing whitespaces.\n\n  // Assuming all ranges are single line.\n  const source = lines[range.from.line].slice(range.from.ch, range.to.ch);\n  const leadingWhitespace = source.search(/\\S/);\n  const trailingWhitespace = source.length - source.trimEnd().length;\n  return {\n    from: {\n      line: range.from.line,\n      ch: range.from.ch + leadingWhitespace,\n    },\n    to: {\n      line: range.to.line,\n      ch: range.to.ch - trailingWhitespace,\n    },\n  };\n}\n\nfunction parseRanges(\n  input: ?string,\n  lines: $ReadOnlyArray<string>,\n): Array<Range> {\n  if (input === undefined || input === null || input === '') {\n    return [];\n  }\n\n  return input.split(';').map(input => {\n    const numbers = input.split('|').map(i => parseInt(i));\n    if (numbers.length !== 3) {\n      throw new Error(`Invalid Location: ${input}`);\n    }\n    const line = numbers[0] - 1;\n    var begin = numbers[1];\n    var end = numbers[2];\n    if (end < begin) {\n      // TODO(T78595608): remove temporary workaround for Pysa inverting locations.\n      [begin, end] = [end, begin];\n    }\n    // If the highlight is empty and the line is in range, then highlight the whole line\n    if (begin === end && end === 1 && line >= 0 && line < lines.length) {\n      end = lines[line].length;\n    }\n\n    return adjustRange(\n      {\n        from: {line, ch: begin - 1},\n        to: {line, ch: end},\n      },\n      lines,\n    );\n  });\n}\n\ntype Layout = $ReadOnly<{\n  totalLines: number,\n  folds: Array<{line: number, range: Range}>,\n}>;\n\nconst linesPerFold = 4;\n\nfunction computeLayout(\n  ranges: Array<Range>,\n  lines: $ReadOnlyArray<string>,\n): Layout {\n  if (ranges.length === 0) {\n    return {totalLines: 10, folds: []};\n  }\n\n  var totalLines = Math.max(\n    ranges[ranges.length - 1].from.line - ranges[0].from.line + 3,\n    10,\n  );\n\n  var folds = [];\n\n  const foldingThreshold = 10;\n  const padding = 1;\n\n  for (var index = 0; index < ranges.length - 1; index++) {\n    const distance = ranges[index + 1].from.line - ranges[index].from.line;\n    const foldSize = distance - 2 * padding;\n    if (distance > foldingThreshold) {\n      const startLine = ranges[index].from.line + padding;\n      const endLine = startLine + foldSize;\n      folds.push({\n        line: startLine,\n        range: {\n          from: {\n            line: startLine,\n            ch: lines[startLine].length,\n          },\n          to: {\n            line: endLine,\n            ch: lines[endLine].length,\n          },\n        },\n      });\n      totalLines = totalLines - foldSize + linesPerFold;\n    }\n  }\n\n  return {totalLines, folds};\n}\n\nexport const SourceQuery = gql`\n  query Issue($path: String) {\n    file(path: $path) {\n      edges {\n        node {\n          contents\n          editor_link\n        }\n      }\n    }\n  }\n`;\n\nfunction Source(\n  props: $ReadOnly<{|path: string, location: string, titos?: string|}>,\n): React$Node {\n  var line = null;\n\n  const {loading, error, data} = useQuery(SourceQuery, {\n    variables: {path: props.path},\n  });\n  const file = data?.file?.edges[0]?.node;\n\n  var content = <div />;\n  if (error) {\n    content = (\n      <Tooltip title={error.toString()}>\n        <Alert message={`No file found for ${props.path}`} type=\"info\" />\n      </Tooltip>\n    );\n  } else if (loading) {\n    content = (\n      <div style={{height: '12em', textAlign: 'center', paddingTop: '5em'}}>\n        <Text type=\"secondary\">\n          <LoadingOutlined />\n          <br />\n          Loading {props.path}...\n        </Text>\n      </div>\n    );\n  } else {\n    const source = file.contents;\n    const lines = source.split('\\n');\n    // Potential mismatch between line numbers in bytecode and source in MT issues\n    // can break the frontend, display the error message in that scenario\n    if (lines.length < props.location.split('|')[0]) {\n      content = (\n        <Alert message={`${props.path} cannot be displayed because of mismatch in line numbers in the source code and the issue. This could be caused by inaccuracies in decompiled bytecode (if viewing Mariana Trench results) or by viewing a file which has been edited after it was processed by your static analyzer.`} type=\"info\" />\n      );\n    } else {\n      const range = parseRanges(props.location, lines)[0];\n      line = range.from.line;\n      const titos = parseRanges(props.titos, lines);\n      const fileExtension = props.path.split('.').pop();\n      const mode = modes[fileExtension] || modes[\"py\"];\n\n      const ranges = [...titos, range].sort(\n        (left, right) => left.from.line - right.from.line,\n      );\n\n      const layout = computeLayout(ranges, lines);\n\n      // React codemirror is horribly broken so store a reference to underlying\n      // JS implementation.\n      var editor = null;\n\n      content = (\n        <CodeMirror\n          value={source}\n          options={{lineNumbers: true, readOnly: 'true', mode}}\n          editorDidMount={nativeEditor => {\n            editor = nativeEditor;\n\n            editor.markText(range.from, range.to, {\n              className: 'Source-selection',\n              attributes: {\n                title: Documentation.source.toNextFrame,\n              },\n            });\n\n            titos.forEach(range => {\n              nativeEditor.markText(range.from, range.to, {\n                className: 'Source-tito',\n                attributes: {\n                  title: Documentation.source.tito,\n                },\n              });\n            });\n\n            layout.folds.forEach(fold => {\n              nativeEditor.foldCode(fold.line, {\n                rangeFinder: _ => fold.range,\n                widget: `Hiding ${fold.range.to.line -\n                  fold.line} lines. Click to expand...`,\n              });\n            });\n            const textHeight = editor.defaultTextHeight();\n            editor.setSize(null, layout.totalLines * textHeight);\n            const offset = editor.heightAtLine(\n              ranges[ranges.length - 1].from.line - layout.totalLines + 2,\n              'local',\n            );\n            editor.scrollTo(\n              0,\n              offset - (linesPerFold + 2) * layout.folds.length * textHeight,\n            );\n          }}\n        />\n      );\n    }\n  }\n\n  return (\n    <>\n      <div class=\"source-menu\">\n        <Tooltip title=\"Open in Editor\" placement=\"bottom\">\n          <Button\n            size=\"small\"\n            icon={<EditOutlined />}\n            type=\"text\"\n            onClick={() => {\n              window.location = file.editor_link;\n            }}\n            disabled={loading || error || !Boolean(file.editor_link)}\n          />\n        </Tooltip>\n        <Tooltip title=\"Reset Scroll\" placement=\"bottom\">\n          <Button\n            size=\"small\"\n            icon={<SelectOutlined />}\n            type=\"text\"\n            onClick={() =>\n              editor && editor.scrollIntoView({line: line || 0, ch: 0})\n            }\n            disabled={loading || error}\n          />\n        </Tooltip>\n      </div>\n      <div class=\"source\">{content}</div>\n    </>\n  );\n}\n\nexport default Source;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport React from 'react';\nimport {Tooltip, Typography} from 'antd';\nconst {Text} = Typography;\n\nexport function HumanReadablePort(props: $ReadOnly<{port: string}>) {\n  // TODO(T71492980): hard-coding heuristics for Pysa right now.\n  var port = props.port;\n\n  var access = '';\n  var accesses = port.match(/(\\[.*\\])+/);\n  if (accesses) {\n    port = port.slice(0, port.length - accesses[1].length);\n    accesses = accesses[1]\n      .split(']')\n      .filter(access => access !== '')\n      .map(access => access.slice(1))\n      .map(access => <Text code>{access}</Text>);\n    access = <> accessing {accesses}</>;\n  }\n\n  if (port === 'result') {\n    port = 'returns';\n  }\n  const formal_match = port.match(/formal\\((.*)\\)/);\n  if (formal_match) {\n    port = (\n      <>\n        into parameter <Text code>{formal_match[1]}</Text>\n      </>\n    );\n  }\n\n  return (\n    <Text type=\"secondary\">\n      {port}\n      {access}\n    </Text>\n  );\n}\n\nfunction makeDalvikParametersHumanReadable(input: string): Array<string> {\n  if (input.length == 0) {\n    return [];\n  }\n\n  if (!input.startsWith('L')) {\n    return [makeDalvikClassHumanReadable(input[0])].concat(\n      makeDalvikParametersHumanReadable(input.slice(1)),\n    );\n  } else {\n    const split = input.split(';');\n    return [makeDalvikClassHumanReadable(split[0] + ';')].concat(\n      makeDalvikParametersHumanReadable(split.slice(1).join(';')),\n    );\n  }\n}\n\nexport function makeDalvikClassHumanReadable(input: string): string {\n  switch (input) {\n    case 'I': return 'int';\n    case 'V': return 'void';\n    case 'Z': return 'boolean';\n  }\n\n  const split = input.split('/');\n  const last = split[split.length - 1];\n  return last[last.length-1] === ';' ? last.slice(0, -1) : last;\n}\n\nfunction makeDalvikHumanReadable(input: string): string {\n  const match = input.match(/(.*);\\.(.*):\\((.*)\\)(.*)/);\n  if (match == null) {\n    return input;\n  }\n\n  const clazz = makeDalvikClassHumanReadable(match[1]);\n  const method = match[2];\n  const return_type = makeDalvikClassHumanReadable(match[4]);\n  const parameters = makeDalvikParametersHumanReadable(match[3]).join(', ');\n\n  return `${return_type} ${clazz}.${method}(${parameters})`;\n}\n\nexport function HumanReadable(\n  props: $ReadOnly<{\n    input: string,\n    separator?: string,\n    threshold?: number,\n    code?: boolean,\n  }>,\n): React$Node {\n  const separator = props.separator || '.';\n  const threshold = props.threshold || 50;\n\n  var readable = props.input;\n\n  if (readable.includes(';')) {\n    // Assume this is a Dalvik identifier\n    readable = makeDalvikHumanReadable(readable);\n  }\n\n  if (readable.length > threshold) {\n    // Attempt to construct `module...Class.method`.\n    const split = readable.split(separator);\n    if (split.length > 3) {\n      readable = `${split[0]}${separator}[...]${separator}${\n        split[split.length - 2]\n      }.${split[split.length - 1]}`;\n    }\n  }\n  return (\n    <Tooltip title={props.input}>\n      <Text code={props.code || false} style={{wordBreak: 'break-all'}}>\n        {readable}\n      </Text>\n    </Tooltip>\n  );\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport React, {useState} from 'react';\nimport {useMutation, gql} from '@apollo/client';\nimport {\n  Card,\n  Col,\n  Modal,\n  Popover,\n  Row,\n  Select,\n  Skeleton,\n  Tag,\n  Tooltip,\n  Typography,\n} from 'antd';\nimport {\n  CodeTwoTone,\n  ExclamationCircleOutlined,\n  FireOutlined,\n  MinusCircleOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nimport Source from './Source.js';\nimport {Documentation} from './Documentation.js';\nimport {HumanReadable} from './HumanReadable';\n\nconst {Option} = Select;\nconst {Text, Link} = Typography;\n\nfunction ShowMore(\n  props: $ReadOnly<{|\n    items: $ReadOnlyArray<string>,\n    maximumElementsToShow: number,\n  |}>,\n): React$Node {\n  const [showMore, setShowMore] = useState(false);\n  const items = props.items;\n\n  if (items.length <= props.maximumElementsToShow) {\n    return (\n      <>\n        {items.map(feature => (\n          <Tag>{feature}</Tag>\n        ))}\n      </>\n    );\n  } else {\n    const truncatedItems = items.slice(\n      0,\n      showMore ? items.length : props.maximumElementsToShow,\n    );\n    const moreToShow = items.length - truncatedItems.length;\n    return (\n      <>\n        {truncatedItems.map(item => (\n          <Tag>{item}</Tag>\n        ))}\n        <Tag\n          onClick={() => setShowMore(!showMore)}\n          icon={!showMore ? <PlusCircleOutlined /> : <MinusCircleOutlined />}>\n          {!showMore ? `Show ${moreToShow} more...` : 'Show fewer...'}\n        </Tag>\n      </>\n    );\n  }\n}\n\nfunction DelayedTooltip(\n  props: $ReadOnly<{|\n    content: string,\n    children: React$Node,\n    placement?: string,\n  |}>,\n): React$Node {\n  return (\n    <Tooltip\n      mouseEnterDelay={1.0}\n      title={props.content}\n      placement={props.placement}>\n      {props.children}\n    </Tooltip>\n  );\n}\n\ntype LeafKind = 'sources' | 'sinks';\n\nfunction Leaves(\n  props: $ReadOnly<{|\n    kind: LeafKind,\n    kinds: $ReadOnlyArray<string>,\n    names: $ReadOnlyArray<string>,\n    distance: number,\n  |}>,\n): React$Node {\n  return (\n    <>\n      <DelayedTooltip content={Documentation.issues.kind}>\n        {props.kinds.map(kind => (\n          <Tag color={props.kind === 'sources' ? 'green' : 'red'}>{kind}</Tag>\n        ))}\n      </DelayedTooltip>{' '}\n      at{' '}\n      <DelayedTooltip content={Documentation.issues.distance}>\n        <Text underline>minimum distance {props.distance}.</Text>\n      </DelayedTooltip>\n      <br />\n      <DelayedTooltip placement=\"right\" content={Documentation.issues.name}>\n        <div style={{marginTop: '.5em'}}>\n          <ShowMore items={props.names} maximumElementsToShow={5} />\n        </div>\n      </DelayedTooltip>\n    </>\n  );\n}\n\nexport type IssueDescription = {\n  issue_id: number,\n  issue_instance_id: number,\n  code: number,\n  message: string,\n  callable: string,\n  filename: string,\n  location: string,\n  sources: $ReadOnlyArray<string>,\n  source_names: $ReadOnlyArray<string>,\n  sinks: $ReadOnlyArray<string>,\n  sink_names: $ReadOnlyArray<string>,\n  status: string,\n  features: $ReadOnlyArray<string>,\n  min_trace_length_to_sources: number,\n  min_trace_length_to_sinks: number,\n  first_seen: string,\n  is_new_issue: boolean,\n  warning_message: string,\n  similar_issues: $ReadOnlyArray<$ReadOnlyArray<string>>\n};\n\nexport const statusMap = {\n  \"uncategorized\": \"Uncategorized\",\n  \"bad_practice\": \"Bad practice\",\n  \"false_positive\": \"False positive\",\n  \"valid_bug\": \"Valid bug\",\n  \"do_not_care\": \"Do not care\",\n};\n\nconst StatusSelect = (\n  props: $ReadOnly<{\n    issue_id: number,\n    status: string,\n  }>,\n): React$Node => {\n  let allStatuses = [];\n  for(let key in statusMap) {\n    allStatuses.push(<Option value={key}>{statusMap[key]}</Option>);\n  };\n\n  const updateStatusMutation = gql`\n    mutation UpdateStatus($id: ID!, $status: String!) {\n      update_status(input: {id: $id, status: $status}) {\n        clientMutationId\n      }\n    }\n  `;\n\n  const [updateStatus, {error: statusUpdateError}] = useMutation(\n    updateStatusMutation\n  );\n\n  const updateStatusFunc = (value) => {\n    updateStatus({variables: {id: props.issue_id, status: value}})\n  };\n\n  if(statusUpdateError) {\n    Modal.error({\n      title: 'Unable to update status',\n      content: statusUpdateError.toString()\n    });\n  }\n\n  return(\n    <Select\n      size='small'\n      defaultValue={props.status}\n      onChange={updateStatusFunc}\n      style={{minWidth: '130px'}}>\n      {allStatuses}\n    </Select>\n  );\n};\n\nexport function Issue(\n  props: $ReadOnly<{\n    run_id: number,\n    issue: IssueDescription,\n    hideTitle?: boolean,\n  }>,\n): React$Node {\n  const gutter = [8, 8];\n\n\n  const Label = (props: $ReadOnly<{children: React$Node}>): React$Node => {\n    return (\n      <Col span={4} style={{textAlign: 'right'}}>\n        <Text type=\"secondary\">{props.children}</Text>\n      </Col>\n    );\n  };\n  const Item = (props: $ReadOnly<{children: React$Node}>): React$Node => {\n    return (\n      <Col span={20}>\n        <Text type=\"secondary\">{props.children}</Text>\n      </Col>\n    );\n  };\n  let similar_issues = null;\n\n  if (props.issue.similar_issues !== undefined) {\n    const issues = props.issue.similar_issues.map(\n      similar_issue => `Issue ${similar_issue['issue_id']} (${similar_issue['score']})`\n    );\n    similar_issues = (\n      <Row gutter={gutter}>\n        <Label>Similar Issues</Label>\n        <Item>\n          <div>\n            <ShowMore\n              items={issues.length? issues: [\"None\"]}\n              maximumElementsToShow={5}\n            />\n          </div>\n        </Item>\n      </Row>\n    );\n  }\n\n  return (\n    <Card\n      size=\"small\"\n      title={\n        <>\n          <FireOutlined style={{marginRight: '.5em'}} />\n          {props.hideTitle ? 'Issue' : <>Issue {props.issue.issue_id}</>}\n        </>\n      }\n      extra={\n        props.hideTitle ? null : (\n          <Link\n            href={`/run/${props.run_id}/issue/${props.issue.issue_instance_id}`}>\n            Traces\n          </Link>\n        )\n      }>\n      <Row gutter={gutter}>\n        <Label>Code</Label>\n        <Item>\n          <Tooltip title={\"Unique identifier for the rule which generated this issue\"}>\n            <Text code>{props.issue.code} : {props.issue.warning_message}</Text>\n          </Tooltip>\n        </Item>\n      </Row>\n      <Row gutter={gutter}>\n        <Label>Description</Label>\n        <Item>{props.issue.message}</Item>\n      </Row>\n      <Row gutter={gutter}>\n        <Label>Status</Label>\n        <Item>\n          <Tooltip title={Documentation.issues.status}>\n            { props.issue.is_new_issue ? (\n              <Tag icon={<ExclamationCircleOutlined />} color=\"warning\">\n                likely new\n              </Tag>\n            ) : null }\n            <StatusSelect\n              issue_id={props.issue.issue_id}\n              status={props.issue.status}/>\n          </Tooltip>\n        </Item>\n      </Row>\n      <Row gutter={gutter}>\n        <Label>First seen</Label>\n        <Item>\n          <Text code>{props.issue.first_seen}</Text>\n        </Item>\n      </Row>\n      <Row gutter={gutter}>\n        <Label>Callable</Label>\n        <Item>\n          <HumanReadable input={props.issue.callable} code />\n        </Item>\n      </Row>\n      <Row gutter={gutter}>\n        <Label>Location</Label>\n        <Item>\n          <Tooltip title=\"Click to preview\">\n            <Popover\n              title=\"Source preview\"\n              content={\n                <div style={{width: '600px'}}>\n                  <Source\n                    path={props.issue.filename}\n                    location={props.issue.location}\n                  />\n                </div>\n              }\n              placement=\"bottomRight\"\n              trigger=\"click\">\n              <CodeTwoTone />\n            </Popover>\n          </Tooltip>{' '}\n          <HumanReadable input={props.issue.filename} code separator=\"/\" />\n        </Item>\n      </Row>\n      <Row gutter={gutter}>\n        <Label>Sources</Label>\n        <Item>\n          <Leaves\n            kind=\"sources\"\n            kinds={props.issue.sources}\n            names={props.issue.source_names}\n            distance={props.issue.min_trace_length_to_sources}\n          />\n        </Item>\n      </Row>\n      <Row gutter={gutter}>\n        <Label>Sinks</Label>\n        <Item>\n          <Leaves\n            kind=\"sinks\"\n            kinds={props.issue.sinks}\n            names={props.issue.sink_names}\n            distance={props.issue.min_trace_length_to_sinks}\n          />\n        </Item>\n      </Row>\n      <Row gutter={gutter}>\n        <Label>Features</Label>\n        <Item>\n          <DelayedTooltip\n            content={Documentation.issues.feature}\n            placement=\"left\">\n            <div>\n              <ShowMore\n                items={props.issue.features}\n                maximumElementsToShow={5}\n              />\n            </div>\n          </DelayedTooltip>\n        </Item>\n      </Row>\n      {similar_issues}\n    </Card>\n  );\n}\n\nexport function IssueSkeleton(): React$Node {\n  return (\n    <Card>\n      <Skeleton active paragraph={{rows: 10}} />\n    </Card>\n  );\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport React, {useState, useEffect} from 'react';\nimport {useQuery, useMutation, gql} from '@apollo/client';\nimport {\n  Alert,\n  AutoComplete,\n  Checkbox,\n  Collapse,\n  Divider,\n  Popover,\n  Button,\n  Form,\n  Input,\n  Layout,\n  Menu,\n  message,\n  Modal,\n  Row,\n  Col,\n  Select,\n  Slider,\n  Tooltip,\n  Typography,\n  Upload,\n} from 'antd';\nimport {\n  ExportOutlined,\n  FieldTimeOutlined,\n  FilterOutlined,\n  ImportOutlined,\n  InboxOutlined,\n  PlusOutlined,\n  MinusCircleOutlined,\n  SettingOutlined,\n  SaveOutlined,\n  DeleteOutlined,\n  ClearOutlined,\n} from '@ant-design/icons';\nimport {Documentation} from './Documentation.js';\nimport {statusMap} from './Issue.js';\n\nimport './Filter.css';\n\nconst {Dragger} = Upload;\nconst {Option} = Select;\nconst {Panel} = Collapse;\nconst {Sider} = Layout;\nconst {SubMenu} = Menu;\nconst {Text} = Typography;\n\ntype FeatureCondition = {\n  mode: string,\n  features: $ReadOnlyArray<string>,\n};\n\ntype FilterDescription = {\n  name?: string,\n  description?: string,\n  codes?: $ReadOnlyArray<number>,\n  paths?: $ReadOnlyArray<string>,\n  source_names?: $ReadOnlyArray<string>,\n  source_kinds?: $ReadOnlyArray<string>,\n  statuses?: $ReadOnlyArray<string>,\n  sink_names?: $ReadOnlyArray<string>,\n  sink_kinds?: $ReadOnlyArray<string>,\n  callables?: $ReadOnlyArray<string>,\n  features?: $ReadOnlyArray<FeatureCondition>,\n  traceLengthFromSources?: $ReadOnlyArray<number>,\n  traceLengthToSinks?: $ReadOnlyArray<number>,\n  is_new_issue?: boolean,\n};\n\nconst emptyFilter = {\n  features: [{mode: 'all of', features: []}],\n};\n\nconst infiniteTraceLength = 31;\nconst gutter = [8, 8];\n\nconst filterEqual = (\n  left: FilterDescription,\n  right: FilterDescription,\n): boolean => {\n  Object.keys(left).forEach(key =>\n    left[key] === undefined ? delete left[key] : {},\n  );\n  Object.keys(right).forEach(key =>\n    right[key] === undefined ? delete right[key] : {},\n  );\n  return JSON.stringify(left) === JSON.stringify(right);\n};\n\nconst Label = (props: $ReadOnly<{label: string}>): React$Node => {\n  const title = props.label\n    .split(/(?=[A-Z])/)\n    .map(value => value.charAt(0).toUpperCase() + value.slice(1))\n    .join(' ');\n  return (\n    <>\n      <Tooltip title={Documentation.filter[props.label]}>\n        <Text type=\"secondary\"> {title}</Text>\n      </Tooltip>\n    </>\n  );\n};\n\nconst Codes = (\n  props: $ReadOnly<{\n    currentFilter: FilterDescription,\n    setCurrentFilter: FilterDescription => void,\n  }>,\n): React$Node => {\n  const codesQuery = gql`\n    query Codes {\n      codes {\n        edges {\n          node {\n            code\n          }\n        }\n      }\n    }\n  `;\n  const {data: codesData} = useQuery(codesQuery);\n  const allCodes = (codesData?.codes?.edges || []).map(edge => edge.node.code);\n\n  return (\n    <>\n      <Label label=\"codes\" />\n      <Row gutter={gutter}>\n        <Col span={22}>\n          <Select\n            mode=\"multiple\"\n            value={props.currentFilter.codes}\n            options={allCodes.map(value => ({value}))}\n            style={{width: '100%'}}\n            onChange={codes =>\n              props.setCurrentFilter({...props.currentFilter, codes})\n            }\n          />\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nconst Paths = (\n  props: $ReadOnly<{\n    currentFilter: FilterDescription,\n    setCurrentFilter: FilterDescription => void,\n  }>,\n): React$Node => {\n  const pathsQuery = gql`\n    query Paths {\n      paths {\n        edges {\n          node {\n            path\n          }\n        }\n      }\n    }\n  `;\n  const {data: pathsData} = useQuery(pathsQuery);\n  const allPaths = (pathsData?.paths?.edges || []).map(edge => edge.node.path);\n\n  return (\n    <>\n      <Label label=\"paths\" />\n      <Row gutter={gutter}>\n        <Col span={22}>\n          <Select\n            mode=\"multiple\"\n            value={props.currentFilter.paths}\n            options={allPaths.map(value => ({value}))}\n            style={{width: '100%'}}\n            onChange={paths =>\n              props.setCurrentFilter({...props.currentFilter, paths})\n            }\n          />\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nconst MatchesIsField = (\n  props: $ReadOnly<{\n    allOptions: $ReadOnlyList<string>,\n    parameterName: string,\n    currentFilter: FilterDescription,\n    setCurrentFilter: FilterDescription => void,\n  }>,\n): React$Node => {\n  const [inputValue, setInputValue] = useState('');\n  const [selectValue, setSelectValue] = useState([]);\n  const [matchedValues, setMatchedValues] = useState([]);\n\n  const triggerChange = (operation: string, value: mixed = undefined): void => {\n    let values = {};\n    if(value === undefined) {\n      value = (operation === 'is') ? selectValue : inputValue;\n    }\n    values[props.parameterName] = {\n      operation: operation,\n      value: value,\n    };\n    props.setCurrentFilter({...props.currentFilter, ...values});\n  }\n\n  const selectedOperation =\n    props.currentFilter[props.parameterName]?.operation || 'is';\n\n  return (\n    <Row gutter={gutter}>\n      <Col span={6}>\n        <Select\n          options={[{value: 'is'}, {value: 'matches'}]}\n          value={selectedOperation}\n          onChange={triggerChange}\n          style={{width: '100%'}}\n        />\n      </Col>\n      <Col span={16}>\n        {selectedOperation === 'matches' ? (\n          <Input\n            placeholder=\"regular expression\"\n            style={{width: '100%'}}\n            value={inputValue}\n            onChange={event => {\n              const value = event.target.value;\n              setInputValue(value);\n              const option_values = props.allOptions.filter(option =>\n                  option.match(value),\n              );\n              setMatchedValues(option_values);\n              triggerChange('matches', value);\n            }}\n            suffix={\n              <Tooltip\n                title={(matchedValues || []).join('\\n')}\n                placement=\"bottom\">\n                <Text type=\"secondary\" size=\"small\">\n                  {(matchedValues || []).length}\n                </Text>\n              </Tooltip>\n            }\n          />\n        ): (\n          <Select\n            mode=\"multiple\"\n            value={selectValue}\n            options={props.allOptions.map(value => ({value}))}\n            style={{width: '100%'}}\n            onChange={value => {\n              setSelectValue(value);\n              triggerChange('is', value);\n            }}\n          />\n        )}\n      </Col>\n    </Row>\n  );\n};\n\nconst SourceNames = (\n  props: $ReadOnly<{\n    currentFilter: FilterDescription,\n    setCurrentFilter: FilterDescription => void,\n  }>,\n): React$Node => {\n  const sourceNamesQuery = gql`\n    query SourceNames {\n      source_names {\n        edges {\n          node {\n            source_name\n          }\n        }\n      }\n    }\n  `;\n  const {data: sourceNamesData} = useQuery(sourceNamesQuery);\n  const allSourceNames = (sourceNamesData?.source_names?.edges || []).map(edge => edge.node.source_name);\n\n  return (\n    <>\n      <Label label=\"name\" />\n      <MatchesIsField\n        allOptions={allSourceNames}\n        currentFilter={props.currentFilter}\n        setCurrentFilter={props.setCurrentFilter}\n        parameterName=\"source_names\"\n      />\n    </>\n  );\n};\n\nconst SourceKinds = (\n  props: $ReadOnly<{\n    currentFilter: FilterDescription,\n    setCurrentFilter: FilterDescription => void,\n  }>,\n): React$Node => {\n  const sourceKindsQuery = gql`\n    query SourceKinds {\n      source_kinds {\n        edges {\n          node {\n            source_kind\n          }\n        }\n      }\n    }\n  `;\n  const {data: sourceKindsData} = useQuery(sourceKindsQuery);\n  const allSourceKinds = (sourceKindsData?.source_kinds?.edges || []).map(edge => edge.node.source_kind);\n\n  return (\n    <>\n      <Label label=\"kind\" />\n      <MatchesIsField\n        allOptions={allSourceKinds}\n        currentFilter={props.currentFilter}\n        setCurrentFilter={props.setCurrentFilter}\n        parameterName=\"source_kinds\"\n      />\n    </>\n  );\n};\n\nconst SinkNames = (\n  props: $ReadOnly<{\n    currentFilter: FilterDescription,\n    setCurrentFilter: FilterDescription => void,\n  }>,\n): React$Node => {\n  const sinkNamesQuery = gql`\n    query SinkNames {\n      sink_names {\n        edges {\n          node {\n            sink_name\n          }\n        }\n      }\n    }\n  `;\n  const {data: sinkNamesData} = useQuery(sinkNamesQuery);\n  const allSinkNames = (sinkNamesData?.sink_names?.edges || []).map(edge => edge.node.sink_name);\n\n  return (\n    <>\n      <Label label=\"name\" />\n      <MatchesIsField\n        allOptions={allSinkNames}\n        currentFilter={props.currentFilter}\n        setCurrentFilter={props.setCurrentFilter}\n        parameterName=\"sink_namess\"\n      />\n    </>\n  );\n};\n\nconst SinkKinds = (\n  props: $ReadOnly<{\n    currentFilter: FilterDescription,\n    setCurrentFilter: FilterDescription => void,\n  }>,\n): React$Node => {\n  const sinkKindsQuery = gql`\n    query SinkKinds {\n      sink_kinds {\n        edges {\n          node {\n            sink_kind\n          }\n        }\n      }\n    }\n  `;\n  const {data: sinkKindsData} = useQuery(sinkKindsQuery);\n  const allSinkKinds = (sinkKindsData?.sink_kinds?.edges || []).map(edge => edge.node.sink_kind);\n\n  return (\n    <>\n      <Label label=\"kind\" />\n      <MatchesIsField\n        allOptions={allSinkKinds}\n        currentFilter={props.currentFilter}\n        setCurrentFilter={props.setCurrentFilter}\n        parameterName=\"sink_kinds\"\n      />\n    </>\n  );\n};\n\nconst Statuses = (\n  props: $ReadOnly<{\n    currentFilter: FilterDescription,\n    setCurrentFilter: FilterDescription => void,\n  }>,\n): React$Node => {\n  const statusQuery = gql`\n    query Statuses {\n      statuses {\n        edges {\n          node {\n            status\n          }\n        }\n      }\n    }\n  `;\n  const {data: statusData} = useQuery(statusQuery);\n  const allStatusOptions = (\n    statusData?.statuses?.edges || []\n  ).map(edge =>\n    edge.node.status.replace(\"IssueStatus.\", \"\")\n  ).map(status =>\n    <Option value={status}>{statusMap[status]}</Option>\n  );\n\n  return (\n    <>\n      <Label label=\"status\" />\n      <Row gutter={gutter}>\n        <Col span={22}>\n          <Select\n            mode=\"multiple\"\n            value={props.currentFilter.statuses}\n            style={{width: '100%'}}\n            onChange={statuses =>\n              props.setCurrentFilter({...props.currentFilter, statuses})\n            }>\n            {allStatusOptions}\n          </Select>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nconst Callables = (\n  props: $ReadOnly<{\n    currentFilter: FilterDescription,\n    setCurrentFilter: FilterDescription => void,\n  }>,\n): React$Node => {\n  const callablesQuery = gql`\n    query Callables {\n      callables {\n        edges {\n          node {\n            callable\n          }\n        }\n      }\n    }\n  `;\n  const {data: callablesData} = useQuery(callablesQuery);\n  const allCallables = (callablesData?.callables?.edges || []).map(\n    edge => edge.node.callable,\n  );\n\n  return (\n    <>\n      <Label label=\"callables\" />\n      <MatchesIsField\n        allOptions={allCallables}\n        currentFilter={props.currentFilter}\n        setCurrentFilter={props.setCurrentFilter}\n        parameterName=\"callables\"\n      />\n    </>\n  );\n};\n\nconst Features = (\n  props: $ReadOnly<{\n    currentFilter: FilterDescription,\n    setCurrentFilter: FilterDescription => void,\n  }>,\n): React$Node => {\n  const featuresQuery = gql`\n    query Features {\n      features {\n        edges {\n          node {\n            feature\n          }\n        }\n      }\n    }\n  `;\n  const {data: featuresData} = useQuery(featuresQuery);\n  const allFeatures = (featuresData?.features?.edges || []).map(\n    edge => edge.node.feature,\n  );\n\n  const features = props.currentFilter.features || [];\n\n  return (\n    <>\n      <Label label=\"features\" />\n      {features.map((feature, index) => {\n        const updateFeature = update => {\n          var newFeatures = [...features];\n          newFeatures[index] = {...feature, ...update};\n          props.setCurrentFilter({\n            ...props.currentFilter,\n            features: newFeatures,\n          });\n        };\n\n        return (\n          <Row gutter={gutter}>\n            <Col span={6}>\n              <Select\n                options={[\n                  {value: 'all of'},\n                  {value: 'any of'},\n                  {value: 'none of'},\n                ]}\n                value={feature.mode}\n                style={{width: '100%'}}\n                onChange={mode => updateFeature({mode})}\n              />\n            </Col>\n            <Col span={16}>\n              <Select\n                mode=\"multiple\"\n                options={allFeatures.map(value => ({value}))}\n                value={feature.features}\n                onChange={features => updateFeature({features})}\n                style={{width: '100%'}}\n              />\n            </Col>\n            <Col span={2}>\n              <Button\n                type=\"text\"\n                onClick={() => {\n                  props.setCurrentFilter({\n                    ...props.currentFilter,\n                    features: features.filter(\n                      (_, filterIndex) => index !== filterIndex,\n                    ),\n                  });\n                }}\n                disabled={features.length < 2}\n                icon={<MinusCircleOutlined />}\n              />\n            </Col>\n          </Row>\n        );\n      })}\n      <Row gutter={gutter}>\n        <Col span={22}>\n          <Button\n            type=\"dashed\"\n            onClick={() => {\n              props.setCurrentFilter({\n                ...props.currentFilter,\n                features: [...features, {mode: 'all of', features: []}],\n              });\n            }}\n            icon={<PlusOutlined />}\n            style={{width: '100%', marginTop: 5}}\n            block>\n            {' '}\n            Add Condition\n          </Button>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nconst IsNewIssue = (\n  props: $ReadOnly<{\n    currentFilter: FilterDescription,\n    setCurrentFilter: FilterDescription => void,\n  }>,\n): React$Node => {\n  return (\n    <>\n      <Label label=\"status\" />\n      <div>\n        <Checkbox\n          checked={props.currentFilter.is_new_issue}\n          onChange={event =>\n            props.setCurrentFilter({\n              ...props.currentFilter,\n              is_new_issue: event.target.checked ? true : undefined,\n            })\n          }\n        />{' '}\n        only show likely new issues\n      </div>\n    </>\n  );\n};\n\ntype TraceLengthKind = 'sources' | 'sinks';\n\nconst TraceLength = (\n  props: $ReadOnly<{\n    kind: TraceLengthKind,\n    currentFilter: FilterDescription,\n    setCurrentFilter: FilterDescription => void,\n  }>,\n): React$Node => {\n  const value =\n    props.kind === 'sources'\n      ? props.currentFilter.traceLengthFromSources\n      : props.currentFilter.traceLengthToSinks;\n  return (\n    <Row gutter={gutter}>\n      <Col span={5} style={{paddingTop: 10}}>\n        <Text type=\"secondary\">\n          {props.kind === 'sources' ? 'From Sources' : 'To Sinks'}\n        </Text>\n      </Col>\n      <Col span={17}>\n        <Slider\n          range\n          min={0}\n          max={infiniteTraceLength}\n          defaultValue={[0, infiniteTraceLength]}\n          marks={{\n            '0': '0',\n            '31': 'unlimited',\n          }}\n          tipFormatter={value =>\n            value === infiniteTraceLength ? 'unlimited' : value\n          }\n          value={value}\n          onChange={value => {\n            if (props.kind === 'sources') {\n              props.setCurrentFilter({\n                ...props.currentFilter,\n                traceLengthFromSources: value,\n              });\n            } else {\n              props.setCurrentFilter({\n                ...props.currentFilter,\n                traceLengthToSinks: value,\n              });\n            }\n          }}\n        />\n      </Col>\n    </Row>\n  );\n};\n\nconst FilterForm = (props: {\n  refetch: mixed => mixed,\n  refetching: boolean,\n  setVisible: boolean => void,\n  currentFilter: FilterDescription,\n  setCurrentFilter: FilterDescription => void,\n  appliedFilter: FilterDescription,\n  setAppliedFilter: FilterDescription => void,\n}): React$Node => {\n  const apply = () => {\n    props.setAppliedFilter(props.currentFilter);\n    props.refetch(filterToVariables(props.currentFilter));\n    props.setVisible(false);\n  };\n\n  return (\n    <>\n      <Codes\n        currentFilter={props.currentFilter}\n        setCurrentFilter={props.setCurrentFilter}\n      />\n      <Paths\n        currentFilter={props.currentFilter}\n        setCurrentFilter={props.setCurrentFilter}\n      />\n      <Collapse ghost>\n        <Panel header=\"Source\">\n          <SourceNames\n            currentFilter={props.currentFilter}\n            setCurrentFilter={props.setCurrentFilter}\n          />\n          <SourceKinds\n            currentFilter={props.currentFilter}\n            setCurrentFilter={props.setCurrentFilter}\n          />\n        </Panel>\n        <Panel header=\"Sink\">\n          <SinkNames\n            currentFilter={props.currentFilter}\n            setCurrentFilter={props.setCurrentFilter}\n          />\n          <SinkKinds\n            currentFilter={props.currentFilter}\n            setCurrentFilter={props.setCurrentFilter}\n          />\n        </Panel>\n      </Collapse>\n      <Statuses\n        currentFilter={props.currentFilter}\n        setCurrentFilter={props.setCurrentFilter}\n      />\n      <Callables\n        currentFilter={props.currentFilter}\n        setCurrentFilter={props.setCurrentFilter}\n      />\n      <Features\n        currentFilter={props.currentFilter}\n        setCurrentFilter={props.setCurrentFilter}\n      />\n      <Divider />\n      <IsNewIssue\n        currentFilter={props.currentFilter}\n        setCurrentFilter={props.setCurrentFilter}\n      />\n      <Divider />\n      <Label label=\"traceLengths\" />\n      <TraceLength\n        kind=\"sources\"\n        currentFilter={props.currentFilter}\n        setCurrentFilter={props.setCurrentFilter}\n      />\n      <TraceLength\n        kind=\"sinks\"\n        currentFilter={props.currentFilter}\n        setCurrentFilter={props.setCurrentFilter}\n      />\n      <Divider />\n      <div style={{textAlign: 'right'}}>\n        <Button\n          onClick={() => {\n            props.setCurrentFilter(emptyFilter);\n          }}\n          disabled={filterEqual(props.currentFilter, emptyFilter)}>\n          Clear\n        </Button>{' '}\n        <Button\n          type=\"primary\"\n          onClick={apply}\n          loading={props.refetching}\n          disabled={filterEqual(props.currentFilter, props.appliedFilter)}>\n          Apply\n        </Button>\n      </div>\n    </>\n  );\n};\n\nconst SaveAndImportFilterModals = (\n  props: $ReadOnly<{|\n    currentFilter: FilterDescription,\n    setCurrentFilter: FilterDescription => void,\n    saveModalVisible: boolean,\n    hideSaveModal: void => void,\n    importModalVisible: boolean,\n    hideImportModalVisible: void => void,\n    refetch: void => void,\n  |}>,\n): React$Node => {\n  const [form] = Form.useForm();\n\n  if(props.currentFilter.name !== undefined) {\n    form.setFieldsValue({\n      name: props.currentFilter.name,\n    });\n  }\n\n  const onCompleted = (data: any): void => {\n    props.refetch();\n  };\n\n  const saveFilterMutation = gql`\n    mutation SaveFilter($name: String!, $description: String, $json: String!) {\n      save_filter(\n        input: {name: $name, description: $description, json: $json}\n      ) {\n        node {\n          name\n          description\n          json\n        }\n      }\n    }\n  `;\n  const [saveFilter, {error}] = useMutation(saveFilterMutation, {onCompleted});\n\n  if (error) {\n    return <Alert type=\"error\">{error.toString()}</Alert>;\n  }\n\n  let filterList = [];\n  let filterNamesList = [];\n\n  const isValidFilter = (filter: FilterDescription): Boolean => {\n    return !(filter.name === undefined ||\n      filter.description === undefined ||\n      Object.keys(filter).length < 3);\n  };\n\n  const importProps = {\n    multiple: true,\n    onRemove: filterFile => {\n      filterList.splice(filterList.indexOf(filterFile), 1);\n    },\n    beforeUpload(filterFile) {\n      return new Promise(resolve => {\n        if (filterFile.type !== 'application/json') {\n          message.error(`${filterFile.name} is not a json file`);\n          resolve(Upload.LIST_IGNORE);\n        } else {\n          let reader: FileReader = new FileReader();\n          reader.onload = (e) => {\n            let filter: FilterDescription = JSON.parse(e.target.result);\n            if (!isValidFilter(filter)) {\n              message.error(`${filterFile.name} is an invalid filter file`);\n            } else {\n              filterList.push(filter);\n              filterNamesList.push(`${filter.name}.json`)\n            }\n            resolve();\n          };\n          reader.readAsText(filterFile);\n        }\n      });\n    },\n    customRequest: ({onSuccess, onError, file}) => {\n      if (filterNamesList.includes(file.name)) {\n        onSuccess(\"Ok\");\n      } else {\n        onError(\"Error\");\n      }\n    },\n  };\n\n  const onImport = (): void => {\n    filterList.forEach(filter => {\n      let name = filter.name;\n      let description = filter.description;\n      delete filter[\"name\"];\n      delete filter[\"description\"];\n      saveFilter({\n        variables: {\n          name: name,\n          description: description,\n          json: JSON.stringify(filter),\n        },\n      });\n    });\n    props.hideImportModal();\n    message.success(`Imported ${filterList.length} filters`);\n    filterList = [];\n    filterNamesList = [];\n  };\n\n  const onSave = (): void => {\n    const values = form.getFieldsValue();\n    saveFilter({\n      variables: {\n        name: values.name,\n        description: values.description,\n        json: JSON.stringify(props.currentFilter),\n      },\n    });\n    props.hideSaveModal();\n    let savedFilter = props.currentFilter;\n    savedFilter[\"name\"] = values.name;\n    savedFilter[\"description\"] = values.description;\n    props.setCurrentFilter(savedFilter);\n  };\n\n  return (\n    <>\n      <Modal\n        title=\"Save Filters...\"\n        visible={props.saveModalVisible}\n        onOk={onSave}\n        okText=\"Save\"\n        onCancel={props.hideSaveModal}\n        zIndex={2000}>\n        <Form layout=\"vertical\" form={form} autoComplete=\"off\">\n          <Form.Item label=\"Name\" name=\"name\">\n            <Input />\n          </Form.Item>\n          <Form.Item label=\"Description\" name=\"description\">\n            <Input />\n          </Form.Item>\n        </Form>\n      </Modal>\n      <Modal\n        visible={props.importModalVisible}\n        okText=\"Import Filters\"\n        onOk={onImport}\n        onCancel={props.hideImportModal}\n        zIndex={2000}\n        destroyOnClose={true}>\n        <Dragger {...importProps} style={{marginTop: '30px'}}>\n          <p className=\"ant-upload-drag-icon\">\n            <InboxOutlined />\n          </p>\n          <p className=\"ant-upload-text\">\n            Click or drag filter json file to import\n          </p>\n        </Dragger>\n      </Modal>\n    </>\n  );\n};\n\nexport function loadFilter(): ?FilterDescription {\n  const filter = window.sessionStorage.getItem('filter');\n  if (filter !== undefined) {\n    return JSON.parse(filter);\n  }\n  return null;\n}\n\nexport function clearFilter(\n  refetch: any = false,\n  setCurrentFilter: any = false,\n  currentFilter: FilterDescription = emptyFilter,\n): void {\n  if(!refetch) {\n    window.sessionStorage.removeItem('filter');\n  } else  {\n    setCurrentFilter(emptyFilter);\n    // workaround for https://github.com/apollographql/react-apollo/issues/3709\n    // implemented in clearAndRefetch function makes us implement this hacky\n    // solution. Otherwise, the app just keeps loading and does nothing.\n    refetch(filterToVariables(emptyFilter));\n    refetch(filterToVariables(currentFilter));\n  }\n}\n\nexport function filterToVariables(filter: FilterDescription): mixed {\n  const rangeValue = value => {\n    if (value === 0) {\n      return undefined;\n    }\n    if (value === infiniteTraceLength) {\n      return undefined;\n    }\n    return value;\n  };\n\n  return {\n    ...filter,\n    min_trace_length_to_sources: rangeValue(\n      (filter.traceLengthFromSources || [])[0],\n    ),\n    max_trace_length_to_sources: rangeValue(\n      (filter.traceLengthFromSources || [])[1],\n    ),\n    min_trace_length_to_sinks: rangeValue((filter.traceLengthToSinks || [])[0]),\n    max_trace_length_to_sinks: rangeValue((filter.traceLengthToSinks || [])[1]),\n  };\n}\n\nfunction getRecentFilters(): mixed {\n  let data = JSON.parse(localStorage.getItem(\"recent_filters\"));\n  if(data){\n    return data.recent_filters;\n  }\n  return [];\n}\n\nexport const filtersQuery = gql`\n  query Filters {\n    filters {\n      edges {\n        node {\n          name\n          description\n          json\n        }\n      }\n    }\n  }\n`;\n\nexport const FilterControls = (props: {\n  refetch: mixed => mixed,\n  refetching: boolean,\n}) => {\n  const [search, setSearch] = useState(null);\n  const initialFilter = loadFilter() || emptyFilter;\n  const [saveModalVisible, setSaveModalVisible] = useState(false);\n  const [deleteModalVisible, setDeleteModalVisible] = useState(false);\n  const [importModalVisible, setImportModalVisible] = useState(false);\n  const [recentFilters, setRecentFilters] = useState(getRecentFilters())\n  const [filterFormVisible, setFilterFormVisible] = useState(false);\n  const [currentFilter, setCurrentFilter] = useState<FilterDescription>(\n    initialFilter,\n  );\n  const [appliedFilter, setAppliedFilter] = useState<FilterDescription>(\n    initialFilter,\n  );\n\n  useEffect(() => {\n    localStorage.setItem(\n      \"recent_filters\",\n      JSON.stringify({\"recent_filters\": recentFilters})\n    );\n  });\n\n  const {\n    loading: filterLoading,\n    error: filterError,\n    data: filterData,\n    refetch: filterRefetch\n  } = useQuery(filtersQuery);\n\n  const filters = filterLoading\n    ? []\n    : filterData.filters.edges.map(edge => {\n        const decoded = JSON.parse(edge.node.json);\n        return {\n          ...edge.node,\n          ...decoded,\n        };\n      });\n\n  const options = filters\n    .filter(filter => {\n      if (search === null) {\n        return true;\n      }\n      return (\n        filter.name.toLowerCase().includes(search.toLowerCase()) ||\n        filter.description?.toLowerCase()?.includes(search.toLowerCase())\n      );\n    })\n    .map(filter => {\n      return {\n        value: filter.name,\n        label: (\n          <div>\n            {filter.name}\n            <br />\n            <Text type=\"secondary\">{filter.description}</Text>\n          </div>\n        ),\n      };\n    });\n\n  var filterMap = {};\n  filters.forEach(filter => (filterMap[filter.name] = filter));\n\n  const deleteFilterMutation = gql`\n    mutation DeleteFilter($name: String!) {\n      delete_filter(input: {name: $name}) {\n        clientMutationId\n      }\n    }\n  `;\n  const [deleteFilter, {error: deleteError}] = useMutation(\n    deleteFilterMutation,\n    {\n      onCompleted: filterRefetch,\n    },\n  );\n\n  if (deleteError) {\n    return <Alert type=\"error\">{deleteError.toString()}</Alert>;\n  }\n  if (filterError) {\n    return <Alert type=\"error\">{filterError.toString()}</Alert>;\n  }\n\n  const onDelete = (): void => {\n    deleteFilter({variables: {name: currentFilter.name}});\n    setDeleteModalVisible(false);\n    setCurrentFilter(emptyFilter);\n    setRecentFilters(recentFilters.filter(item =>\n      item !== currentFilter.name\n    ));\n  };\n\n  const updateRecentFilters = (filter: string): void => {\n    if(recentFilters.length > 0) {\n      let filterArray = recentFilters;\n      let index = filterArray.indexOf(filter);\n      if(index === -1) {\n        let end = filterArray.length >= 5 ? 4 : filterArray.length;\n        filterArray = filterArray.slice(0, end);\n        setRecentFilters([filter].concat(filterArray));\n      }\n    } else {\n      setRecentFilters([filter]);\n    }\n  };\n\n  const onSelect = (value: string): void => {\n    setSearch(null);\n    updateRecentFilters(value);\n    setCurrentFilter(filterMap[value]);\n    setAppliedFilter(filterMap[value]);\n    props.refetch(filterToVariables(filterMap[value]));\n    setFilterFormVisible(false);\n  };\n\n  return (\n    <Sider width={300}>\n      <Filter\n        refetch={props.refetch}\n        refetching={props.refetching}\n        currentFilter={currentFilter}\n        setCurrentFilter={setCurrentFilter}\n        appliedFilter={appliedFilter}\n        setAppliedFilter={setAppliedFilter}\n        visible={filterFormVisible}\n        setVisible={setFilterFormVisible}\n      />\n      <Modal\n        visible={deleteModalVisible}\n        okText=\"Delete\"\n        onOk={onDelete}\n        onCancel={() => setDeleteModalVisible(false)}\n        zIndex={2000}>\n        Do you really want to delete{' '}\n        <Text keyboard>{currentFilter.name}</Text>\n      </Modal>\n      <SaveAndImportFilterModals\n        currentFilter={currentFilter}\n        setCurrentFilter={setCurrentFilter}\n        saveModalVisible={saveModalVisible}\n        hideSaveModal={() => setSaveModalVisible(false)}\n        importModalVisible={importModalVisible}\n        hideImportModal={() => setImportModalVisible(false)}\n        refetch={filterRefetch}/>\n      <Menu\n        mode=\"inline\"\n        defaultOpenKeys={['recents']}\n        style={{ borderRight: 0 }}\n        selectable={false}>\n        <>\n          <AutoComplete\n            style={{width: '100%', padding: '12px 12px 0 12px'}}\n            options={options}\n            onSelect={onSelect}\n            onSearch={setSearch}\n            value={search || currentFilter?.name || null}>\n            <Input.Search placeholder=\"saved filter\" />\n          </AutoComplete>\n        </>\n        <SubMenu icon={<SettingOutlined />} title=\"Filter options\">\n          <Menu.Item\n            disabled={filterEqual(emptyFilter, currentFilter)}\n            onClick={() => setSaveModalVisible(true)}\n            icon={<SaveOutlined />}>\n            Save\n          </Menu.Item>\n          <Menu.Item\n            disabled={currentFilter?.name === undefined}\n            onClick={() => setDeleteModalVisible(true)}\n            icon={<DeleteOutlined />}>\n            Delete\n          </Menu.Item>\n          <Menu.Item\n            disabled={currentFilter?.name === undefined}\n            icon={<ExportOutlined />}>\n            {(currentFilter?.name === undefined) ? \"Export\" :\n              <a\n                href={`/export_filter/${currentFilter.name}`}\n                download={`${currentFilter.name}.json`}\n                target='_blank'\n                rel='noopener noreferrer'>\n                Export\n              </a>\n            }\n          </Menu.Item>\n          <Menu.Item\n            onClick={() => setImportModalVisible(true)}\n            icon={<ImportOutlined />}>\n            Import\n          </Menu.Item>\n        </SubMenu>\n        <SubMenu\n          key=\"recents\"\n          disabled={!(recentFilters.length > 0)}\n          icon={<FieldTimeOutlined />} title=\"Recent filters\">\n          { recentFilters.map(name => (\n            <Menu.Item onClick={() => onSelect(name)}>\n              {name}\n            </Menu.Item>\n          ))}\n        </SubMenu>\n      </Menu>\n    </Sider>\n  )\n};\n\nconst Filter = (props: {\n  refetch: any,\n  refetching: boolean,\n  currentFilter: FilterDescription,\n  setCurrentFilter: FilterDescription => void,\n  appliedFilter: FilterDescription,\n  setAppliedFilter: FilterDescription => void,\n}) => {\n  useEffect(() => {\n    window.sessionStorage.setItem('filter', JSON.stringify(props.currentFilter));\n  }, [props.currentFilter]);\n  const initialFilter = loadFilter() || emptyFilter;\n\n  const content = (\n    <div style={{width: '500px'}}>\n      <FilterForm\n        refetch={props.refetch}\n        refetching={props.refetching}\n        setVisible={props.setVisible}\n        currentFilter={props.currentFilter}\n        setCurrentFilter={props.setCurrentFilter}\n        appliedFilter={props.appliedFilter}\n        setAppliedFilter={props.setAppliedFilter}\n      />\n    </div>\n  );\n\n  const clearButton = (\n    <Button\n      style={{width: '100%', marginTop: '10px'}}\n      icon={<ClearOutlined />}\n      onClick={() =>\n        clearFilter(props.refetch, props.setCurrentFilter, props.currentFilter)\n      }>\n        Clear Filter\n    </Button>\n  );\n\n  return (\n    <>\n      <div style={{marginBottom: '10px'}}>\n        <Popover\n          visible={props.visible}\n          content={content}\n          placement=\"leftTop\"\n          onClick={() => props.setVisible(!props.visible)}>\n          <Button\n            style={{width: '100%'}}\n            icon={<FilterOutlined />}\n            type={!filterEqual(initialFilter, emptyFilter) ? 'primary' : null}>\n            Filter...\n          </Button>\n        </Popover>\n        { !filterEqual(initialFilter, emptyFilter) ? clearButton : null }\n      </div>\n    </>\n  );\n};\n\nexport default FilterControls;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport React, { useEffect, useState } from 'react';\nimport { useQuery, gql } from '@apollo/client';\nimport { Button, Layout, Modal, Breadcrumb } from 'antd';\nimport FilterControls, { loadFilter, filterToVariables } from './Filter';\nimport { Issue, IssueSkeleton } from './Issue.js';\n\nfunction IssuesList(props: $ReadOnly<{|\n  issues: any,\n  run_id: number,\n  onFetchMore: any,\n  canFetchMore: boolean\n|}>): React$Node {\n  return (\n    <>\n      {props.issues.map(({ node }) => (\n        <>\n          <Issue run_id={props.run_id} issue={node} />\n          <br />\n        </>\n      ))}\n      <div style={{ textAlign: 'center' }}>\n        <Button\n          type=\"dashed\"\n          disabled={!props.canFetchMore}\n          onClick={props.onFetchMore}>\n          Load More...\n        </Button>\n      </div>\n    </>\n  );\n}\n\nconst PAGE_SIZE = 20;\n\nexport const IssueQuery = gql`\n  query Issue(\n    $after: String\n    $run_id: Int!\n    $codes: [Int]\n    $paths: [String]\n    $callables: MatchesIsField\n    $source_names: MatchesIsField\n    $source_kinds: MatchesIsField\n    $sink_names: MatchesIsField\n    $sink_kinds: MatchesIsField\n    $statuses: [String]\n    $features: [FeatureCondition]\n    $min_trace_length_to_sinks: Int\n    $max_trace_length_to_sinks: Int\n    $min_trace_length_to_sources: Int\n    $max_trace_length_to_sources: Int\n    $is_new_issue: Boolean\n  ) {\n    issues(\n      first: ${PAGE_SIZE}\n      after: $after\n      run_id: $run_id\n      codes: $codes\n      paths: $paths\n      callables: $callables\n      source_names: $source_names\n      source_kinds: $source_kinds\n      sink_names: $sink_names\n      sink_kinds: $sink_kinds\n      statuses: $statuses\n      features: $features\n      min_trace_length_to_sinks: $min_trace_length_to_sinks\n      max_trace_length_to_sinks: $max_trace_length_to_sinks\n      min_trace_length_to_sources: $min_trace_length_to_sources\n      max_trace_length_to_sources: $max_trace_length_to_sources\n      is_new_issue: $is_new_issue\n    ) {\n      edges {\n        node {\n          issue_id\n          issue_instance_id\n          code\n          message\n          callable\n          filename\n          location\n          sources\n          source_names\n          sinks\n          sink_names\n          status\n          features\n          is_new_issue\n          min_trace_length_to_sources\n          min_trace_length_to_sinks\n          first_seen\n          warning_message\n        }\n      }\n      pageInfo {\n        endCursor\n      }\n    }\n  }\n`;\n\nconst Issues = (props: $ReadOnly<{ match: any }>): React$Node => {\n  const run_id = props.match.params.run_id;\n\n  const savedFilter = loadFilter();\n  const variables = savedFilter ? filterToVariables(savedFilter) : null;\n\n  const [oldData, setOldData] = useState(null);\n  const [refetching, setRefetching] = useState(false);\n\n  const [cursor, setCursor] = useState(null);\n  const { loading, error, data, fetchMore, refetch } = useQuery(IssueQuery, {\n    variables: { ...variables, run_id, offset: 0 },\n  });\n  const [moreData, setMoreData] = useState([]);\n  const [canFetchMore, setCanFetchMore] = useState(true);\n\n  // Ridiculous workaround for https://github.com/apollographql/react-apollo/issues/3709.\n  const clearAndRefetch = values => {\n    setOldData(data);\n    setRefetching(true);\n    refetch(values);\n  };\n  useEffect(() => {\n    if (data !== oldData) {\n      setRefetching(false);\n    }\n  }, [data, oldData, setOldData]);\n\n  var content = null;\n  if (error) {\n    content = (\n      <Modal title=\"Error\" visible={true} footer={null}>\n        <p>{error.toString()}</p>\n      </Modal>\n    );\n  } else if (loading) {\n    content = <IssueSkeleton />;\n  } else {\n    const issues = data.issues.edges || [];\n    content = (\n      <IssuesList\n        run_id={run_id}\n        issues={[...issues, ...moreData]}\n        onFetchMore={() => {\n          fetchMore({\n            variables: {\n              after: cursor || data.issues.pageInfo.endCursor,\n            }\n          }).then(fetchMoreResult => {\n            const issues = fetchMoreResult.data.issues;\n            setCursor(issues.pageInfo.endCursor);\n            setMoreData([...moreData, ...issues.edges])\n            setCanFetchMore(issues.edges.length == PAGE_SIZE)\n          });\n        }}\n        canFetchMore={issues.length >= PAGE_SIZE && canFetchMore}\n      />\n    );\n  }\n\n  return (\n    <>\n      <Breadcrumb style={{ margin: '16px 0' }}>\n        <Breadcrumb.Item href=\"/runs\">Runs</Breadcrumb.Item>\n        <Breadcrumb.Item>Run {run_id}</Breadcrumb.Item>\n      </Breadcrumb>\n      <Layout>\n        <Layout style={{ paddingRight: '24px' }}>\n          {content}\n        </Layout>\n        <FilterControls\n          refetch={clearAndRefetch}\n          refetching={refetching} />\n      </Layout>\n    </>\n  );\n};\n\nexport default Issues;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport type {IssueDescription} from './Issue.js';\nimport React, {useState} from 'react';\nimport {withRouter} from 'react-router';\nimport {\n  Alert,\n  Breadcrumb,\n  Card,\n  Divider,\n  Modal,\n  Skeleton,\n  Select,\n  Tag,\n  Tooltip,\n  Typography,\n} from 'antd';\nimport {\n  ExpandAltOutlined,\n  LoginOutlined,\n  LogoutOutlined,\n  VerticalAlignMiddleOutlined,\n  VerticalAlignBottomOutlined,\n  VerticalAlignTopOutlined,\n} from '@ant-design/icons';\nimport {useQuery, gql} from '@apollo/client';\nimport Source from './Source.js';\nimport {Issue, IssueSkeleton} from './Issue.js';\nimport {HumanReadable, HumanReadablePort} from './HumanReadable';\n\nrequire('./Traces.css');\n\nconst {Text} = Typography;\nconst {Option} = Select;\n\nfunction TraceRoot(\n  props: $ReadOnly<{|data: any, loading: boolean|}>,\n): React$Node {\n  if (props.loading) {\n    return (\n      <>\n        <Card>\n          <Skeleton active />\n        </Card>\n        <br />\n      </>\n    );\n  }\n\n  const issue = props.data.issues.edges[0].node;\n\n  return (\n    <>\n      <Card>\n        <Text>\n          <VerticalAlignMiddleOutlined style={{marginRight: '.5em'}} />\n          Source and sink traces meet at{' '}\n          <HumanReadable input={issue.callable} code /> in {' '}\n          <HumanReadable input={issue.filename} code />.\n        </Text>\n        <Source path={issue.filename} location={issue.location} />\n      </Card>\n      <br />\n    </>\n  );\n}\n\ntype Kind = 'precondition' | 'postcondition';\n\ntype Frame = $ReadOnly<{\n  frame_id: number,\n  callee: string,\n  callee_port: string,\n  callee_id: number,\n  filename: string,\n  callee_location: string,\n  trace_length: number,\n  is_leaf: boolean,\n  titos: string,\n}>;\n\nfunction SelectFrame(\n  props: $ReadOnly<{|\n    issue_instance_id: number,\n    frames: $ReadOnlyArray<Frame>,\n    kind: Kind,\n  |}>,\n): React$Node {\n  const [selectedFrameIndex, setSelectedFrameIndex] = useState(\n    props.frames.length === 0 ? null : 0,\n  );\n\n  if (props.frames.length === 0) {\n    return (\n      <div style={{width: '100%', textAlign: 'center', padding: '2em'}}>\n        <Text type=\"warning\">Missing Trace Frame</Text>\n      </div>\n    );\n  }\n\n  const source = (\n    <Source\n      path={props.frames[0].filename}\n      location={props.frames[0].callee_location}\n      titos={props.frames[0].titos}\n    />\n  );\n\n  const isPostcondition = props.kind === 'postcondition';\n  const isLeaf =\n    selectedFrameIndex !== null && props.frames[selectedFrameIndex].is_leaf;\n\n  var select = null;\n  if (!isLeaf) {\n    const icon = (frame): React$Node => {\n      const leaf = isPostcondition ? 'source' : 'sink';\n\n      var icon = <ExpandAltOutlined />;\n      if (frame.trace_length === 1) {\n        icon = isPostcondition ? <LogoutOutlined /> : <LoginOutlined />;\n      }\n\n      return (\n        <Tooltip title={`Distance to ${leaf}`}>\n          <Text type=\"secondary\">\n            {icon} {frame.trace_length}{' '}\n          </Text>\n        </Tooltip>\n      );\n    };\n\n    select = (\n      <div class=\"Trace-select\">\n        <Select\n          defaultValue={selectedFrameIndex}\n          style={{width: '100%'}}\n          onChange={setSelectedFrameIndex}\n          suffixIcon={null}\n          disabled={props.frames.length < 2}>\n          {props.frames.map((frame, index) => {\n            return (\n              <Option value={index}>\n                {icon(frame)}\n                <HumanReadable input={frame.callee} code threshold={30} />{' '}\n                <HumanReadablePort port={frame.callee_port || ''} />\n              </Option>\n            );\n          })}\n        </Select>\n      </div>\n    );\n  }\n\n  var next = null;\n  if (selectedFrameIndex !== null && !isLeaf) {\n    next = (\n      <LoadFrame\n        issue_instance_id={props.issue_instance_id}\n        frame={props.frames[selectedFrameIndex]}\n        kind={props.kind}\n      />\n    );\n  }\n\n  return (\n    <>\n      {isPostcondition ? (\n        <>\n          {next}\n          {select}\n        </>\n      ) : null}\n      {source}\n      {!isPostcondition ? (\n        <>\n          {select}\n          {next}\n        </>\n      ) : null}\n    </>\n  );\n}\n\nfunction LoadFrame(\n  props: $ReadOnly<{|\n    issue_instance_id: number,\n    frame: Frame,\n    kind: Kind,\n  |}>,\n): React$Node {\n  const NextTraceFramesQuery = gql`\n    query NextTraceFrames(\n      $issue_instance_id: Int!\n      $frame_id: Int!\n      $kind: String!\n    ) {\n      next_trace_frames(\n        issue_instance_id: $issue_instance_id\n        frame_id: $frame_id\n        kind: $kind\n      ) {\n        edges {\n          node {\n            frame_id\n            callee\n            callee_port\n            callee_id\n            filename\n            callee_location\n            trace_length\n            is_leaf\n            titos\n          }\n        }\n      }\n    }\n  `;\n  const {loading, error, data} = useQuery(NextTraceFramesQuery, {\n    variables: {\n      issue_instance_id: props.issue_instance_id,\n      frame_id: props.frame.frame_id,\n      kind: props.kind,\n    },\n  });\n  const frames = (data?.next_trace_frames?.edges || []).map(edge => edge.node);\n\n  if (loading) {\n    return <Skeleton active />;\n  }\n\n  if (error) {\n    return <Alert type=\"error\">{error.toString()}</Alert>;\n  }\n\n  return (\n    <SelectFrame\n      issue_instance_id={props.issue_instance_id}\n      frames={frames}\n      kind={props.kind}\n    />\n  );\n}\n\nexport const InitialTraceFramesQuery = gql`\n  query InitialTraceFrame($issue_instance_id: Int!, $kind: String!) {\n    initial_trace_frames(issue_instance_id: $issue_instance_id, kind: $kind) {\n      edges {\n        node {\n          frame_id\n          callee\n          callee_id\n          filename\n          callee_location\n          trace_length\n          is_leaf\n        }\n      }\n    }\n  }\n`;\n\n\nfunction Expansion(\n  props: $ReadOnly<{|\n    issue_instance_id: number,\n    issue: ?IssueDescription,\n    kind: Kind,\n  |}>,\n): React$Node {\n  const {loading, error, data} = useQuery(InitialTraceFramesQuery, {\n    variables: {issue_instance_id: props.issue_instance_id, kind: props.kind},\n  });\n  const frames = (data?.initial_trace_frames?.edges || []).map(\n    edge => edge.node,\n  );\n\n  const isPostcondition = props.kind === 'postcondition';\n\n  var content = null;\n  if (loading) {\n    content = <Skeleton active />;\n  } else if (error) {\n    content = <Alert type=\"error\">{error.toString()}</Alert>;\n  } else {\n    content = (\n      <SelectFrame\n        issue_instance_id={props.issue_instance_id}\n        frames={frames}\n        kind={props.kind}\n      />\n    );\n  }\n\n  var description = null;\n  const issue = props.issue;\n  if (issue != null) {\n    if (isPostcondition) {\n      description = (\n        <>\n          <Text>\n            <VerticalAlignTopOutlined style={{marginRight: '.5em'}} />\n            Data of {issue.sources.length === 1 ? 'type ' : 'types '}\n            {issue.sources.map(leave => (\n              <Tag color=\"green\">{leave}</Tag>\n            ))}\n            flowing <i>up to</i> <HumanReadable input={issue.callable} code />\n            {' '}in <HumanReadable input={issue.filename} code/>.\n          </Text>\n          <Divider plain>Traces</Divider>\n        </>\n      );\n    } else {\n      description = (\n        <>\n          <Text>\n            <VerticalAlignBottomOutlined style={{marginRight: '.5em'}} />\n            Data of {issue.sources.length === 1 ? 'type ' : 'types '}\n            {issue.sources.map(leave => (\n              <Tag color=\"green\">{leave}</Tag>\n            ))}\n            flowing <i>from</i> <HumanReadable input={issue.callable} code />{' '}\n            into sinks of {issue.sinks.length === 1 ? 'type ' : 'types '}\n            {issue.sinks.map(leave => (\n              <Tag color=\"red\">{leave}</Tag>\n            ))}\n            in <HumanReadable input={issue.filename} code/>.\n          </Text>\n          <Divider plain>Traces</Divider>\n        </>\n      );\n    }\n  }\n  return (\n    <>\n      <Card>\n        {description}\n        {content}\n      </Card>\n      <br />\n    </>\n  );\n}\n\nexport const IssueQuery = gql`\n  query Issue($run_id: Int!, $issue_instance_id: Int!) {\n    issues(run_id: $run_id, issue_instance_id: $issue_instance_id) {\n      edges {\n        node {\n          issue_id\n          issue_instance_id\n          code\n          message\n          callable\n          filename\n          location\n          sources\n          source_names\n          sinks\n          sink_names\n          features\n          min_trace_length_to_sources\n          min_trace_length_to_sinks\n          first_seen\n          status\n          similar_issues {\n            issue_id\n            score\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport function Trace(props: $ReadOnly<{|match: any|}>): React$Node {\n  const run_id = props.match.params.run_id;\n  const issue_instance_id = props.match.params.issue_instance_id;\n\n  const {loading, error, data} = useQuery(IssueQuery, {\n    variables: {run_id, issue_instance_id},\n  });\n  const issue = data?.issues?.edges[0]?.node || null;\n\n  var content = null;\n  if (error) {\n    content = (\n      <Modal title=\"Error\" visible={true} footer={null}>\n        <p>{error.toString()}</p>\n      </Modal>\n    );\n  } else {\n    content = (\n      <>\n        {loading ? (\n          <IssueSkeleton />\n        ) : (\n          <Issue run_id={run_id} issue={issue} hideTitle={true} />\n        )}\n        <br />\n        <Expansion\n          issue_instance_id={issue_instance_id}\n          issue={issue}\n          kind=\"postcondition\"\n        />\n        <TraceRoot data={data} loading={loading} />\n        <Expansion\n          issue_instance_id={issue_instance_id}\n          issue={issue}\n          kind=\"precondition\"\n        />\n      </>\n    );\n  }\n\n  return (\n    <>\n      <Breadcrumb style={{margin: '16px 0'}}>\n        <Breadcrumb.Item href=\"/runs\">Runs</Breadcrumb.Item>\n        <Breadcrumb.Item href={`/run/${run_id}`}>Run {run_id}</Breadcrumb.Item>\n        <Breadcrumb.Item>Issue {issue?.issue_id || ''}</Breadcrumb.Item>\n      </Breadcrumb>\n      {content}\n    </>\n  );\n}\n\nexport default withRouter(Trace);\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport React, {useState} from 'react';\nimport {useQuery, useMutation, gql} from '@apollo/client';\nimport {Breadcrumb, Card, Col, Modal, Row, Typography} from 'antd';\nimport {DeleteOutlined, LoadingOutlined, SyncOutlined} from '@ant-design/icons';\nimport {clearFilter} from './Filter';\n\nconst {Text, Link} = Typography;\n\ntype RunDescription = $ReadOnly<{\n  run_id: number,\n  date: string,\n}>;\n\nfunction Run(props: $ReadOnly<{run: RunDescription}>): React$Node {\n  const gutter = [8, 8];\n  const [showRun, setShowRun] = useState(true);\n\n  const Label = (props: $ReadOnly<{children: React$Node}>): React$Node => {\n    return (\n      <Col span={8} style={{textAlign: 'right'}}>\n        <Text type=\"secondary\">{props.children}</Text>\n      </Col>\n    );\n  };\n  const Item = (props: $ReadOnly<{children: React$Node}>): React$Node => {\n    return (\n      <Col span={16}>\n        <Text type=\"secondary\">{props.children}</Text>\n      </Col>\n    );\n  };\n\n  const deleteRunMutation = gql`\n    mutation DeleteRun($id: ID!) {\n      delete_run(input: {id: $id}) {\n        clientMutationId\n      }\n    }\n  `;\n\n  const [deleteRun, {error: deleteError}] = useMutation(\n    deleteRunMutation,\n    {\n      onCompleted() {\n        setShowRun(false)\n      }\n    }\n  );\n\n  const onDelete = (): void => {\n    deleteRun({variables: {id: props.run.run_id}});\n  };\n\n  if(deleteError) {\n    Modal.error({title: 'Unable to delete run ', content: deleteError.toString()});\n  }\n\n  const contents = (\n    <Col span={8}>\n      <Card\n        size=\"small\"\n        title={\n          <>\n            <SyncOutlined style={{marginRight: '.5em'}} />\n            Run {props.run.run_id}\n          </>\n        }\n        extra={\n          <Link\n            onClick={() => clearFilter()}\n            href={`/run/${props.run.run_id}`}>\n            Issues\n          </Link>\n        }\n        actions={[\n          <DeleteOutlined onClick={onDelete}/>\n        ]}>\n        <Row gutter={gutter}>\n          <Label>Date</Label>\n          <Item>\n            <Text code>{props.run.date}</Text>\n          </Item>\n        </Row>\n        <Row gutter={gutter}>\n          <Label>Total issues</Label>\n          <Item>\n            <Text code>{props.run.num_issues || 0}</Text>\n          </Item>\n        </Row>\n        <Row gutter={gutter}>\n          <Label>Triaged issues</Label>\n          <Item>\n            <Text code>{props.run.triaged_issues || 0}</Text>\n          </Item>\n        </Row>\n        <Row gutter={gutter}>\n          <Label>Commit hash</Label>\n          <Item>\n            <Text code>{props.run.commit_hash || \"None\"}</Text>\n          </Item>\n        </Row>\n\n      </Card>\n      <br />\n    </Col>\n  )\n\n  return (\n    <>\n      { showRun ? contents : null }\n    </>\n  );\n}\n\nexport const RunsQuery = gql`\n  query Run {\n    runs {\n      edges {\n        node {\n          run_id\n          date\n          commit_hash\n          num_issues\n          triaged_issues\n        }\n      }\n    }\n  }\n`;\n\nexport default function Runs(props: $ReadOnly<{}>): React$Node {\n  const {loading, error, data} = useQuery(RunsQuery);\n\n  if (error) {\n    Modal.error({title: 'Unable to load run data', content: error.toString()});\n    return null;\n  }\n\n  var content = null;\n  if (loading) {\n    content = (\n      <Col span={8}>\n        <Card>\n          <div style={{height: '12em', textAlign: 'center', paddingTop: '5em'}}>\n            <Text type=\"secondary\">\n              <LoadingOutlined />\n              <br />\n              Loading runs...\n            </Text>\n          </div>\n        </Card>\n      </Col>\n    );\n  }\n\n  if (data) {\n    content = data.runs.edges.map(edge => <Run run={edge.node} />);\n  }\n\n  return (\n    <>\n      <Breadcrumb style={{margin: '16px 0'}}>\n        <Breadcrumb.Item>Runs</Breadcrumb.Item>\n      </Breadcrumb>\n      <Row gutter={16}>\n        {content}\n      </Row>\n    </>\n  );\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Layout} from 'antd';\nimport './index.css';\nimport Issues from './Issues';\nimport Traces from './Traces';\nimport Runs from './Runs';\nimport * as serviceWorker from './serviceWorker';\nimport {Route, BrowserRouter as Router} from 'react-router-dom';\nimport {ApolloClient, InMemoryCache, ApolloProvider} from '@apollo/client';\nimport {FireFilled} from '@ant-design/icons';\nimport {useQuery, gql} from '@apollo/client';\nimport {Card, Modal, Typography} from 'antd';\nimport {LoadingOutlined} from '@ant-design/icons';\n\nimport 'antd/dist/antd.css';\n\nconst {Header, Content, Footer} = Layout;\nconst {Text} = Typography;\n\nlet uri = '/graphql';\nif (process.env.NODE_ENV === \"development\") {\n  uri = 'http://localhost:13337/graphql';\n}\nconst client = new ApolloClient({\n  uri: uri,\n  cache: new InMemoryCache(),\n});\n\nfunction IssuesForLatestRun(): React$Node {\n  const RunsQuery = gql`\n    query Run {\n      runs {\n        edges {\n          node {\n            run_id\n            date\n          }\n        }\n      }\n    }\n  `;\n\n  const {loading, error} = useQuery(RunsQuery, {\n    onCompleted: data => {\n      var run_id = -1;\n      data.runs.edges.forEach(edge => {\n        if (edge.node.run_id > run_id) {\n          run_id = edge.node.run_id;\n        }\n      });\n      if (run_id === -1) {\n        Modal.error({\n          title: 'Unable to load run data',\n          content: 'No completed run found',\n        });\n      }\n      window.location = `/run/${run_id}`;\n    },\n  });\n\n  if (error) {\n    Modal.error({title: 'Unable to load run data', content: error.toString()});\n  }\n\n  if (loading) {\n    return (\n      <Card>\n        <div style={{height: '12em', textAlign: 'center', paddingTop: '5em'}}>\n          <Text type=\"secondary\">\n            <LoadingOutlined />\n            <br />\n            Loading latest run...\n          </Text>\n        </div>\n      </Card>\n    );\n  }\n\n  return null;\n}\n\nconst routing = (\n  <ApolloProvider client={client}>\n    <Router>\n      <Layout>\n        <Header class=\"header\">\n          <div class=\"logo\">\n            <FireFilled style={{marginRight: '.2em'}} />\n            SAPP\n          </div>\n        </Header>\n        <Content>\n          <div class=\"main\">\n            <Route exact path=\"/\" component={IssuesForLatestRun} />\n            <Route exact path=\"/runs/\" component={Runs} />\n            <Route exact path=\"/run/:run_id/\" component={Issues} />\n            <Route\n              exact\n              path=\"/run/:run_id/issue/:issue_instance_id\"\n              component={Traces}\n            />\n          </div>\n        </Content>\n        <Footer />\n      </Layout>\n    </Router>\n  </ApolloProvider>\n);\n\nReactDOM.render(routing, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}